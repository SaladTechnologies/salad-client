/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ContainerGroupInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerGroupInstance{}

// ContainerGroupInstance A Container Group Instance represents a running instance of a container group on a specific machine. It provides information about the execution state, readiness, and version of the deployed container group.
type ContainerGroupInstance struct {
	// The container group instance identifier.
	Id string `json:"id"`
	// The container group machine identifier.
	MachineId string `json:"machine_id"`
	State ContainerGroupInstanceState `json:"state"`
	// The UTC timestamp when the container group instance last changed its state. This helps track the lifecycle and state transitions of the instance.
	UpdateTime time.Time `json:"update_time"`
	// The version of the container group definition currently running on this instance. Used to track deployment and update progress across the container group fleet.
	Version int32 `json:"version"`
	// Indicates whether the container group instance is currently passing its readiness checks and is able to receive traffic or perform its intended function. If no readiness probe is defined, this will be true once the instance is fully started.
	Ready *bool `json:"ready,omitempty"`
	// Indicates whether the container group instance has successfully completed its startup sequence and passed any configured startup probes. This will always be true when no startup probe is defined for the container group.
	Started *bool `json:"started,omitempty"`
	// The cost of deleting the container group instance
	DeletionCost *int32 `json:"deletion_cost,omitempty"`
}

type _ContainerGroupInstance ContainerGroupInstance

// NewContainerGroupInstance instantiates a new ContainerGroupInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerGroupInstance(id string, machineId string, state ContainerGroupInstanceState, updateTime time.Time, version int32) *ContainerGroupInstance {
	this := ContainerGroupInstance{}
	this.Id = id
	this.MachineId = machineId
	this.State = state
	this.UpdateTime = updateTime
	this.Version = version
	var deletionCost int32 = 0
	this.DeletionCost = &deletionCost
	return &this
}

// NewContainerGroupInstanceWithDefaults instantiates a new ContainerGroupInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerGroupInstanceWithDefaults() *ContainerGroupInstance {
	this := ContainerGroupInstance{}
	var deletionCost int32 = 0
	this.DeletionCost = &deletionCost
	return &this
}

// GetId returns the Id field value
func (o *ContainerGroupInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContainerGroupInstance) SetId(v string) {
	o.Id = v
}

// GetMachineId returns the MachineId field value
func (o *ContainerGroupInstance) GetMachineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineId
}

// GetMachineIdOk returns a tuple with the MachineId field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetMachineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MachineId, true
}

// SetMachineId sets field value
func (o *ContainerGroupInstance) SetMachineId(v string) {
	o.MachineId = v
}

// GetState returns the State field value
func (o *ContainerGroupInstance) GetState() ContainerGroupInstanceState {
	if o == nil {
		var ret ContainerGroupInstanceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetStateOk() (*ContainerGroupInstanceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ContainerGroupInstance) SetState(v ContainerGroupInstanceState) {
	o.State = v
}

// GetUpdateTime returns the UpdateTime field value
func (o *ContainerGroupInstance) GetUpdateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateTime, true
}

// SetUpdateTime sets field value
func (o *ContainerGroupInstance) SetUpdateTime(v time.Time) {
	o.UpdateTime = v
}

// GetVersion returns the Version field value
func (o *ContainerGroupInstance) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ContainerGroupInstance) SetVersion(v int32) {
	o.Version = v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *ContainerGroupInstance) GetReady() bool {
	if o == nil || IsNil(o.Ready) {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.Ready) {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *ContainerGroupInstance) HasReady() bool {
	if o != nil && !IsNil(o.Ready) {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *ContainerGroupInstance) SetReady(v bool) {
	o.Ready = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *ContainerGroupInstance) GetStarted() bool {
	if o == nil || IsNil(o.Started) {
		var ret bool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ContainerGroupInstance) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given bool and assigns it to the Started field.
func (o *ContainerGroupInstance) SetStarted(v bool) {
	o.Started = &v
}

// GetDeletionCost returns the DeletionCost field value if set, zero value otherwise.
func (o *ContainerGroupInstance) GetDeletionCost() int32 {
	if o == nil || IsNil(o.DeletionCost) {
		var ret int32
		return ret
	}
	return *o.DeletionCost
}

// GetDeletionCostOk returns a tuple with the DeletionCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerGroupInstance) GetDeletionCostOk() (*int32, bool) {
	if o == nil || IsNil(o.DeletionCost) {
		return nil, false
	}
	return o.DeletionCost, true
}

// HasDeletionCost returns a boolean if a field has been set.
func (o *ContainerGroupInstance) HasDeletionCost() bool {
	if o != nil && !IsNil(o.DeletionCost) {
		return true
	}

	return false
}

// SetDeletionCost gets a reference to the given int32 and assigns it to the DeletionCost field.
func (o *ContainerGroupInstance) SetDeletionCost(v int32) {
	o.DeletionCost = &v
}

func (o ContainerGroupInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerGroupInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["machine_id"] = o.MachineId
	toSerialize["state"] = o.State
	toSerialize["update_time"] = o.UpdateTime
	toSerialize["version"] = o.Version
	if !IsNil(o.Ready) {
		toSerialize["ready"] = o.Ready
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.DeletionCost) {
		toSerialize["deletion_cost"] = o.DeletionCost
	}
	return toSerialize, nil
}

func (o *ContainerGroupInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"machine_id",
		"state",
		"update_time",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerGroupInstance := _ContainerGroupInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainerGroupInstance)

	if err != nil {
		return err
	}

	*o = ContainerGroupInstance(varContainerGroupInstance)

	return err
}

type NullableContainerGroupInstance struct {
	value *ContainerGroupInstance
	isSet bool
}

func (v NullableContainerGroupInstance) Get() *ContainerGroupInstance {
	return v.value
}

func (v *NullableContainerGroupInstance) Set(val *ContainerGroupInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerGroupInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerGroupInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerGroupInstance(val *ContainerGroupInstance) *NullableContainerGroupInstance {
	return &NullableContainerGroupInstance{value: val, isSet: true}
}

func (v NullableContainerGroupInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerGroupInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


