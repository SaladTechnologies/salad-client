/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.7
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateContainerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateContainerGroup{}

// CreateContainerGroup Represents a request to create a container group
type CreateContainerGroup struct {
	Name string `json:"name" validate:"regexp=^[a-z][a-z0-9-]{0,61}[a-z0-9]$"`
	DisplayName NullableString `json:"display_name,omitempty" validate:"regexp=^[ ,-.0-9A-Za-z]+$"`
	Container CreateContainer `json:"container"`
	AutostartPolicy bool `json:"autostart_policy"`
	RestartPolicy ContainerRestartPolicy `json:"restart_policy"`
	Replicas int32 `json:"replicas"`
	// List of countries nodes must be located in. Remove this field to permit nodes from any country.
	CountryCodes []CountryCode `json:"country_codes,omitempty"`
	Networking *CreateContainerGroupNetworking `json:"networking,omitempty"`
	LivenessProbe *ContainerGroupLivenessProbe `json:"liveness_probe,omitempty"`
	ReadinessProbe *ContainerGroupReadinessProbe `json:"readiness_probe,omitempty"`
	StartupProbe *ContainerGroupStartupProbe `json:"startup_probe,omitempty"`
	QueueConnection *ContainerGroupQueueConnection `json:"queue_connection,omitempty"`
	QueueAutoscaler *QueueAutoscaler `json:"queue_autoscaler,omitempty"`
}

type _CreateContainerGroup CreateContainerGroup

// NewCreateContainerGroup instantiates a new CreateContainerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateContainerGroup(name string, container CreateContainer, autostartPolicy bool, restartPolicy ContainerRestartPolicy, replicas int32) *CreateContainerGroup {
	this := CreateContainerGroup{}
	this.Name = name
	this.Container = container
	this.AutostartPolicy = autostartPolicy
	this.RestartPolicy = restartPolicy
	this.Replicas = replicas
	return &this
}

// NewCreateContainerGroupWithDefaults instantiates a new CreateContainerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateContainerGroupWithDefaults() *CreateContainerGroup {
	this := CreateContainerGroup{}
	return &this
}

// GetName returns the Name field value
func (o *CreateContainerGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateContainerGroup) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateContainerGroup) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateContainerGroup) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *CreateContainerGroup) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *CreateContainerGroup) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *CreateContainerGroup) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetContainer returns the Container field value
func (o *CreateContainerGroup) GetContainer() CreateContainer {
	if o == nil {
		var ret CreateContainer
		return ret
	}

	return o.Container
}

// GetContainerOk returns a tuple with the Container field value
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetContainerOk() (*CreateContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Container, true
}

// SetContainer sets field value
func (o *CreateContainerGroup) SetContainer(v CreateContainer) {
	o.Container = v
}

// GetAutostartPolicy returns the AutostartPolicy field value
func (o *CreateContainerGroup) GetAutostartPolicy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutostartPolicy
}

// GetAutostartPolicyOk returns a tuple with the AutostartPolicy field value
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetAutostartPolicyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutostartPolicy, true
}

// SetAutostartPolicy sets field value
func (o *CreateContainerGroup) SetAutostartPolicy(v bool) {
	o.AutostartPolicy = v
}

// GetRestartPolicy returns the RestartPolicy field value
func (o *CreateContainerGroup) GetRestartPolicy() ContainerRestartPolicy {
	if o == nil {
		var ret ContainerRestartPolicy
		return ret
	}

	return o.RestartPolicy
}

// GetRestartPolicyOk returns a tuple with the RestartPolicy field value
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetRestartPolicyOk() (*ContainerRestartPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestartPolicy, true
}

// SetRestartPolicy sets field value
func (o *CreateContainerGroup) SetRestartPolicy(v ContainerRestartPolicy) {
	o.RestartPolicy = v
}

// GetReplicas returns the Replicas field value
func (o *CreateContainerGroup) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *CreateContainerGroup) SetReplicas(v int32) {
	o.Replicas = v
}

// GetCountryCodes returns the CountryCodes field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetCountryCodes() []CountryCode {
	if o == nil || IsNil(o.CountryCodes) {
		var ret []CountryCode
		return ret
	}
	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetCountryCodesOk() ([]CountryCode, bool) {
	if o == nil || IsNil(o.CountryCodes) {
		return nil, false
	}
	return o.CountryCodes, true
}

// HasCountryCodes returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasCountryCodes() bool {
	if o != nil && !IsNil(o.CountryCodes) {
		return true
	}

	return false
}

// SetCountryCodes gets a reference to the given []CountryCode and assigns it to the CountryCodes field.
func (o *CreateContainerGroup) SetCountryCodes(v []CountryCode) {
	o.CountryCodes = v
}

// GetNetworking returns the Networking field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetNetworking() CreateContainerGroupNetworking {
	if o == nil || IsNil(o.Networking) {
		var ret CreateContainerGroupNetworking
		return ret
	}
	return *o.Networking
}

// GetNetworkingOk returns a tuple with the Networking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetNetworkingOk() (*CreateContainerGroupNetworking, bool) {
	if o == nil || IsNil(o.Networking) {
		return nil, false
	}
	return o.Networking, true
}

// HasNetworking returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasNetworking() bool {
	if o != nil && !IsNil(o.Networking) {
		return true
	}

	return false
}

// SetNetworking gets a reference to the given CreateContainerGroupNetworking and assigns it to the Networking field.
func (o *CreateContainerGroup) SetNetworking(v CreateContainerGroupNetworking) {
	o.Networking = &v
}

// GetLivenessProbe returns the LivenessProbe field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetLivenessProbe() ContainerGroupLivenessProbe {
	if o == nil || IsNil(o.LivenessProbe) {
		var ret ContainerGroupLivenessProbe
		return ret
	}
	return *o.LivenessProbe
}

// GetLivenessProbeOk returns a tuple with the LivenessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetLivenessProbeOk() (*ContainerGroupLivenessProbe, bool) {
	if o == nil || IsNil(o.LivenessProbe) {
		return nil, false
	}
	return o.LivenessProbe, true
}

// HasLivenessProbe returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasLivenessProbe() bool {
	if o != nil && !IsNil(o.LivenessProbe) {
		return true
	}

	return false
}

// SetLivenessProbe gets a reference to the given ContainerGroupLivenessProbe and assigns it to the LivenessProbe field.
func (o *CreateContainerGroup) SetLivenessProbe(v ContainerGroupLivenessProbe) {
	o.LivenessProbe = &v
}

// GetReadinessProbe returns the ReadinessProbe field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetReadinessProbe() ContainerGroupReadinessProbe {
	if o == nil || IsNil(o.ReadinessProbe) {
		var ret ContainerGroupReadinessProbe
		return ret
	}
	return *o.ReadinessProbe
}

// GetReadinessProbeOk returns a tuple with the ReadinessProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetReadinessProbeOk() (*ContainerGroupReadinessProbe, bool) {
	if o == nil || IsNil(o.ReadinessProbe) {
		return nil, false
	}
	return o.ReadinessProbe, true
}

// HasReadinessProbe returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasReadinessProbe() bool {
	if o != nil && !IsNil(o.ReadinessProbe) {
		return true
	}

	return false
}

// SetReadinessProbe gets a reference to the given ContainerGroupReadinessProbe and assigns it to the ReadinessProbe field.
func (o *CreateContainerGroup) SetReadinessProbe(v ContainerGroupReadinessProbe) {
	o.ReadinessProbe = &v
}

// GetStartupProbe returns the StartupProbe field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetStartupProbe() ContainerGroupStartupProbe {
	if o == nil || IsNil(o.StartupProbe) {
		var ret ContainerGroupStartupProbe
		return ret
	}
	return *o.StartupProbe
}

// GetStartupProbeOk returns a tuple with the StartupProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetStartupProbeOk() (*ContainerGroupStartupProbe, bool) {
	if o == nil || IsNil(o.StartupProbe) {
		return nil, false
	}
	return o.StartupProbe, true
}

// HasStartupProbe returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasStartupProbe() bool {
	if o != nil && !IsNil(o.StartupProbe) {
		return true
	}

	return false
}

// SetStartupProbe gets a reference to the given ContainerGroupStartupProbe and assigns it to the StartupProbe field.
func (o *CreateContainerGroup) SetStartupProbe(v ContainerGroupStartupProbe) {
	o.StartupProbe = &v
}

// GetQueueConnection returns the QueueConnection field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetQueueConnection() ContainerGroupQueueConnection {
	if o == nil || IsNil(o.QueueConnection) {
		var ret ContainerGroupQueueConnection
		return ret
	}
	return *o.QueueConnection
}

// GetQueueConnectionOk returns a tuple with the QueueConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetQueueConnectionOk() (*ContainerGroupQueueConnection, bool) {
	if o == nil || IsNil(o.QueueConnection) {
		return nil, false
	}
	return o.QueueConnection, true
}

// HasQueueConnection returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasQueueConnection() bool {
	if o != nil && !IsNil(o.QueueConnection) {
		return true
	}

	return false
}

// SetQueueConnection gets a reference to the given ContainerGroupQueueConnection and assigns it to the QueueConnection field.
func (o *CreateContainerGroup) SetQueueConnection(v ContainerGroupQueueConnection) {
	o.QueueConnection = &v
}

// GetQueueAutoscaler returns the QueueAutoscaler field value if set, zero value otherwise.
func (o *CreateContainerGroup) GetQueueAutoscaler() QueueAutoscaler {
	if o == nil || IsNil(o.QueueAutoscaler) {
		var ret QueueAutoscaler
		return ret
	}
	return *o.QueueAutoscaler
}

// GetQueueAutoscalerOk returns a tuple with the QueueAutoscaler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerGroup) GetQueueAutoscalerOk() (*QueueAutoscaler, bool) {
	if o == nil || IsNil(o.QueueAutoscaler) {
		return nil, false
	}
	return o.QueueAutoscaler, true
}

// HasQueueAutoscaler returns a boolean if a field has been set.
func (o *CreateContainerGroup) HasQueueAutoscaler() bool {
	if o != nil && !IsNil(o.QueueAutoscaler) {
		return true
	}

	return false
}

// SetQueueAutoscaler gets a reference to the given QueueAutoscaler and assigns it to the QueueAutoscaler field.
func (o *CreateContainerGroup) SetQueueAutoscaler(v QueueAutoscaler) {
	o.QueueAutoscaler = &v
}

func (o CreateContainerGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateContainerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.DisplayName.IsSet() {
		toSerialize["display_name"] = o.DisplayName.Get()
	}
	toSerialize["container"] = o.Container
	toSerialize["autostart_policy"] = o.AutostartPolicy
	toSerialize["restart_policy"] = o.RestartPolicy
	toSerialize["replicas"] = o.Replicas
	if !IsNil(o.CountryCodes) {
		toSerialize["country_codes"] = o.CountryCodes
	}
	if !IsNil(o.Networking) {
		toSerialize["networking"] = o.Networking
	}
	if !IsNil(o.LivenessProbe) {
		toSerialize["liveness_probe"] = o.LivenessProbe
	}
	if !IsNil(o.ReadinessProbe) {
		toSerialize["readiness_probe"] = o.ReadinessProbe
	}
	if !IsNil(o.StartupProbe) {
		toSerialize["startup_probe"] = o.StartupProbe
	}
	if !IsNil(o.QueueConnection) {
		toSerialize["queue_connection"] = o.QueueConnection
	}
	if !IsNil(o.QueueAutoscaler) {
		toSerialize["queue_autoscaler"] = o.QueueAutoscaler
	}
	return toSerialize, nil
}

func (o *CreateContainerGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"container",
		"autostart_policy",
		"restart_policy",
		"replicas",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateContainerGroup := _CreateContainerGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateContainerGroup)

	if err != nil {
		return err
	}

	*o = CreateContainerGroup(varCreateContainerGroup)

	return err
}

type NullableCreateContainerGroup struct {
	value *CreateContainerGroup
	isSet bool
}

func (v NullableCreateContainerGroup) Get() *CreateContainerGroup {
	return v.value
}

func (v *NullableCreateContainerGroup) Set(val *CreateContainerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateContainerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateContainerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateContainerGroup(val *CreateContainerGroup) *NullableCreateContainerGroup {
	return &NullableCreateContainerGroup{value: val, isSet: true}
}

func (v NullableCreateContainerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateContainerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


