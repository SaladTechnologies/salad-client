/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package salad-client

import (
	"encoding/json"
)

// checks if the RecipeNetworking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeNetworking{}

// RecipeNetworking Represents recipe networking parameters
type RecipeNetworking struct {
	Protocol RecipeNetworkingProtocol `json:"protocol"`
	Port int32 `json:"port"`
	Auth bool `json:"auth"`
	Dns string `json:"dns"`
}

// NewRecipeNetworking instantiates a new RecipeNetworking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeNetworking(protocol RecipeNetworkingProtocol, port int32, auth bool, dns string) *RecipeNetworking {
	this := RecipeNetworking{}
	this.Protocol = protocol
	this.Port = port
	this.Auth = auth
	this.Dns = dns
	return &this
}

// NewRecipeNetworkingWithDefaults instantiates a new RecipeNetworking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeNetworkingWithDefaults() *RecipeNetworking {
	this := RecipeNetworking{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *RecipeNetworking) GetProtocol() RecipeNetworkingProtocol {
	if o == nil {
		var ret RecipeNetworkingProtocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *RecipeNetworking) GetProtocolOk() (*RecipeNetworkingProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *RecipeNetworking) SetProtocol(v RecipeNetworkingProtocol) {
	o.Protocol = v
}

// GetPort returns the Port field value
func (o *RecipeNetworking) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *RecipeNetworking) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *RecipeNetworking) SetPort(v int32) {
	o.Port = v
}

// GetAuth returns the Auth field value
func (o *RecipeNetworking) GetAuth() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Auth
}

// GetAuthOk returns a tuple with the Auth field value
// and a boolean to check if the value has been set.
func (o *RecipeNetworking) GetAuthOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Auth, true
}

// SetAuth sets field value
func (o *RecipeNetworking) SetAuth(v bool) {
	o.Auth = v
}

// GetDns returns the Dns field value
func (o *RecipeNetworking) GetDns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value
// and a boolean to check if the value has been set.
func (o *RecipeNetworking) GetDnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dns, true
}

// SetDns sets field value
func (o *RecipeNetworking) SetDns(v string) {
	o.Dns = v
}

func (o RecipeNetworking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeNetworking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	toSerialize["port"] = o.Port
	toSerialize["auth"] = o.Auth
	toSerialize["dns"] = o.Dns
	return toSerialize, nil
}

type NullableRecipeNetworking struct {
	value *RecipeNetworking
	isSet bool
}

func (v NullableRecipeNetworking) Get() *RecipeNetworking {
	return v.value
}

func (v *NullableRecipeNetworking) Set(val *RecipeNetworking) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeNetworking) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeNetworking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeNetworking(val *RecipeNetworking) *NullableRecipeNetworking {
	return &NullableRecipeNetworking{value: val, isSet: true}
}

func (v NullableRecipeNetworking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeNetworking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


