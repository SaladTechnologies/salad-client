/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.7
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// InferenceEndpointJobStatus The current status.
type InferenceEndpointJobStatus string

// List of inference_endpoint_job_status
const (
	INFERENCEENDPOINTJOBSTATUS_PENDING InferenceEndpointJobStatus = "pending"
	INFERENCEENDPOINTJOBSTATUS_RUNNING InferenceEndpointJobStatus = "running"
	INFERENCEENDPOINTJOBSTATUS_SUCCEEDED InferenceEndpointJobStatus = "succeeded"
	INFERENCEENDPOINTJOBSTATUS_CANCELLED InferenceEndpointJobStatus = "cancelled"
	INFERENCEENDPOINTJOBSTATUS_FAILED InferenceEndpointJobStatus = "failed"
)

// All allowed values of InferenceEndpointJobStatus enum
var AllowedInferenceEndpointJobStatusEnumValues = []InferenceEndpointJobStatus{
	"pending",
	"running",
	"succeeded",
	"cancelled",
	"failed",
}

func (v *InferenceEndpointJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InferenceEndpointJobStatus(value)
	for _, existing := range AllowedInferenceEndpointJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InferenceEndpointJobStatus", value)
}

// NewInferenceEndpointJobStatusFromValue returns a pointer to a valid InferenceEndpointJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInferenceEndpointJobStatusFromValue(v string) (*InferenceEndpointJobStatus, error) {
	ev := InferenceEndpointJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InferenceEndpointJobStatus: valid values are %v", v, AllowedInferenceEndpointJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InferenceEndpointJobStatus) IsValid() bool {
	for _, existing := range AllowedInferenceEndpointJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to inference_endpoint_job_status value
func (v InferenceEndpointJobStatus) Ptr() *InferenceEndpointJobStatus {
	return &v
}

type NullableInferenceEndpointJobStatus struct {
	value *InferenceEndpointJobStatus
	isSet bool
}

func (v NullableInferenceEndpointJobStatus) Get() *InferenceEndpointJobStatus {
	return v.value
}

func (v *NullableInferenceEndpointJobStatus) Set(val *InferenceEndpointJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInferenceEndpointJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInferenceEndpointJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInferenceEndpointJobStatus(val *InferenceEndpointJobStatus) *NullableInferenceEndpointJobStatus {
	return &NullableInferenceEndpointJobStatus{value: val, isSet: true}
}

func (v NullableInferenceEndpointJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInferenceEndpointJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

