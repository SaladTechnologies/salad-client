/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RecreateContainerGroupInstanceProblemType the model 'RecreateContainerGroupInstanceProblemType'
type RecreateContainerGroupInstanceProblemType string

// List of RecreateContainerGroupInstanceProblemType
const (
	ORGANIZATION_NOT_FOUND RecreateContainerGroupInstanceProblemType = "organization_not_found"
	CONTAINER_GROUP_NOT_FOUND RecreateContainerGroupInstanceProblemType = "container_group_not_found"
	NODE_NOT_SCHEDULED RecreateContainerGroupInstanceProblemType = "node_not_scheduled"
	CONTAINER_GROUP_INSTANCE_NOT_FOUND RecreateContainerGroupInstanceProblemType = "container_group_instance_not_found"
	ORGANIZATION_QUOTAS_NOT_DEFINED RecreateContainerGroupInstanceProblemType = "organization_quotas_not_defined"
	TOO_MANY_REQUESTS RecreateContainerGroupInstanceProblemType = "too_many_requests"
	UNEXPECTED_ERROR RecreateContainerGroupInstanceProblemType = "unexpected_error"
	NULL RecreateContainerGroupInstanceProblemType = "null"
)

// All allowed values of RecreateContainerGroupInstanceProblemType enum
var AllowedRecreateContainerGroupInstanceProblemTypeEnumValues = []RecreateContainerGroupInstanceProblemType{
	"organization_not_found",
	"container_group_not_found",
	"node_not_scheduled",
	"container_group_instance_not_found",
	"organization_quotas_not_defined",
	"too_many_requests",
	"unexpected_error",
	"null",
}

func (v *RecreateContainerGroupInstanceProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecreateContainerGroupInstanceProblemType(value)
	for _, existing := range AllowedRecreateContainerGroupInstanceProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecreateContainerGroupInstanceProblemType", value)
}

// NewRecreateContainerGroupInstanceProblemTypeFromValue returns a pointer to a valid RecreateContainerGroupInstanceProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecreateContainerGroupInstanceProblemTypeFromValue(v string) (*RecreateContainerGroupInstanceProblemType, error) {
	ev := RecreateContainerGroupInstanceProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecreateContainerGroupInstanceProblemType: valid values are %v", v, AllowedRecreateContainerGroupInstanceProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecreateContainerGroupInstanceProblemType) IsValid() bool {
	for _, existing := range AllowedRecreateContainerGroupInstanceProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecreateContainerGroupInstanceProblemType value
func (v RecreateContainerGroupInstanceProblemType) Ptr() *RecreateContainerGroupInstanceProblemType {
	return &v
}

type NullableRecreateContainerGroupInstanceProblemType struct {
	value *RecreateContainerGroupInstanceProblemType
	isSet bool
}

func (v NullableRecreateContainerGroupInstanceProblemType) Get() *RecreateContainerGroupInstanceProblemType {
	return v.value
}

func (v *NullableRecreateContainerGroupInstanceProblemType) Set(val *RecreateContainerGroupInstanceProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecreateContainerGroupInstanceProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecreateContainerGroupInstanceProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecreateContainerGroupInstanceProblemType(val *RecreateContainerGroupInstanceProblemType) *NullableRecreateContainerGroupInstanceProblemType {
	return &NullableRecreateContainerGroupInstanceProblemType{value: val, isSet: true}
}

func (v NullableRecreateContainerGroupInstanceProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecreateContainerGroupInstanceProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

