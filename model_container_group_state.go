/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ContainerGroupState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerGroupState{}

// ContainerGroupState Represents the operational state of a container group during its lifecycle, including timing information, status, and instance distribution metrics. This state captures the current execution status, start and finish times, and provides visibility into the operational health across instances.
type ContainerGroupState struct {
	// Optional textual description or notes about the current state of the container group
	Description NullableString `json:"description,omitempty" validate:"regexp=^.*$"`
	// Timestamp when the container group execution finished or is expected to finish
	FinishTime time.Time `json:"finish_time"`
	InstanceStatusCounts ContainerGroupInstanceStatusCount `json:"instance_status_counts"`
	// Timestamp when the container group execution started
	StartTime time.Time `json:"start_time"`
	Status ContainerGroupStatus `json:"status"`
}

type _ContainerGroupState ContainerGroupState

// NewContainerGroupState instantiates a new ContainerGroupState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerGroupState(finishTime time.Time, instanceStatusCounts ContainerGroupInstanceStatusCount, startTime time.Time, status ContainerGroupStatus) *ContainerGroupState {
	this := ContainerGroupState{}
	this.FinishTime = finishTime
	this.InstanceStatusCounts = instanceStatusCounts
	this.StartTime = startTime
	this.Status = status
	return &this
}

// NewContainerGroupStateWithDefaults instantiates a new ContainerGroupState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerGroupStateWithDefaults() *ContainerGroupState {
	this := ContainerGroupState{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerGroupState) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerGroupState) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ContainerGroupState) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ContainerGroupState) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ContainerGroupState) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ContainerGroupState) UnsetDescription() {
	o.Description.Unset()
}

// GetFinishTime returns the FinishTime field value
func (o *ContainerGroupState) GetFinishTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FinishTime
}

// GetFinishTimeOk returns a tuple with the FinishTime field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupState) GetFinishTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinishTime, true
}

// SetFinishTime sets field value
func (o *ContainerGroupState) SetFinishTime(v time.Time) {
	o.FinishTime = v
}

// GetInstanceStatusCounts returns the InstanceStatusCounts field value
func (o *ContainerGroupState) GetInstanceStatusCounts() ContainerGroupInstanceStatusCount {
	if o == nil {
		var ret ContainerGroupInstanceStatusCount
		return ret
	}

	return o.InstanceStatusCounts
}

// GetInstanceStatusCountsOk returns a tuple with the InstanceStatusCounts field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupState) GetInstanceStatusCountsOk() (*ContainerGroupInstanceStatusCount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceStatusCounts, true
}

// SetInstanceStatusCounts sets field value
func (o *ContainerGroupState) SetInstanceStatusCounts(v ContainerGroupInstanceStatusCount) {
	o.InstanceStatusCounts = v
}

// GetStartTime returns the StartTime field value
func (o *ContainerGroupState) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupState) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *ContainerGroupState) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetStatus returns the Status field value
func (o *ContainerGroupState) GetStatus() ContainerGroupStatus {
	if o == nil {
		var ret ContainerGroupStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ContainerGroupState) GetStatusOk() (*ContainerGroupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ContainerGroupState) SetStatus(v ContainerGroupStatus) {
	o.Status = v
}

func (o ContainerGroupState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerGroupState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["finish_time"] = o.FinishTime
	toSerialize["instance_status_counts"] = o.InstanceStatusCounts
	toSerialize["start_time"] = o.StartTime
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ContainerGroupState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"finish_time",
		"instance_status_counts",
		"start_time",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerGroupState := _ContainerGroupState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainerGroupState)

	if err != nil {
		return err
	}

	*o = ContainerGroupState(varContainerGroupState)

	return err
}

type NullableContainerGroupState struct {
	value *ContainerGroupState
	isSet bool
}

func (v NullableContainerGroupState) Get() *ContainerGroupState {
	return v.value
}

func (v *NullableContainerGroupState) Set(val *ContainerGroupState) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerGroupState) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerGroupState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerGroupState(val *ContainerGroupState) *NullableContainerGroupState {
	return &NullableContainerGroupState{value: val, isSet: true}
}

func (v NullableContainerGroupState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerGroupState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


