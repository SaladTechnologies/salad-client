/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// ContainerGroupInstanceState The state of the container group instance
type ContainerGroupInstanceState string

// List of ContainerGroupInstanceState
const (
	CONTAINERGROUPINSTANCESTATE_ALLOCATING ContainerGroupInstanceState = "allocating"
	CONTAINERGROUPINSTANCESTATE_DOWNLOADING ContainerGroupInstanceState = "downloading"
	CONTAINERGROUPINSTANCESTATE_CREATING ContainerGroupInstanceState = "creating"
	CONTAINERGROUPINSTANCESTATE_RUNNING ContainerGroupInstanceState = "running"
	CONTAINERGROUPINSTANCESTATE_STOPPING ContainerGroupInstanceState = "stopping"
)

// All allowed values of ContainerGroupInstanceState enum
var AllowedContainerGroupInstanceStateEnumValues = []ContainerGroupInstanceState{
	"allocating",
	"downloading",
	"creating",
	"running",
	"stopping",
}

func (v *ContainerGroupInstanceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerGroupInstanceState(value)
	for _, existing := range AllowedContainerGroupInstanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerGroupInstanceState", value)
}

// NewContainerGroupInstanceStateFromValue returns a pointer to a valid ContainerGroupInstanceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerGroupInstanceStateFromValue(v string) (*ContainerGroupInstanceState, error) {
	ev := ContainerGroupInstanceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerGroupInstanceState: valid values are %v", v, AllowedContainerGroupInstanceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerGroupInstanceState) IsValid() bool {
	for _, existing := range AllowedContainerGroupInstanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerGroupInstanceState value
func (v ContainerGroupInstanceState) Ptr() *ContainerGroupInstanceState {
	return &v
}

type NullableContainerGroupInstanceState struct {
	value *ContainerGroupInstanceState
	isSet bool
}

func (v NullableContainerGroupInstanceState) Get() *ContainerGroupInstanceState {
	return v.value
}

func (v *NullableContainerGroupInstanceState) Set(val *ContainerGroupInstanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerGroupInstanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerGroupInstanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerGroupInstanceState(val *ContainerGroupInstanceState) *NullableContainerGroupInstanceState {
	return &NullableContainerGroupInstanceState{value: val, isSet: true}
}

func (v NullableContainerGroupInstanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerGroupInstanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

