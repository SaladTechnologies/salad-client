/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StartRecipeDeploymentProblemType the model 'StartRecipeDeploymentProblemType'
type StartRecipeDeploymentProblemType string

// List of StartRecipeDeploymentProblemType
const (
	NULL StartRecipeDeploymentProblemType = "null"
)

// All allowed values of StartRecipeDeploymentProblemType enum
var AllowedStartRecipeDeploymentProblemTypeEnumValues = []StartRecipeDeploymentProblemType{
	"null",
}

func (v *StartRecipeDeploymentProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StartRecipeDeploymentProblemType(value)
	for _, existing := range AllowedStartRecipeDeploymentProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StartRecipeDeploymentProblemType", value)
}

// NewStartRecipeDeploymentProblemTypeFromValue returns a pointer to a valid StartRecipeDeploymentProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStartRecipeDeploymentProblemTypeFromValue(v string) (*StartRecipeDeploymentProblemType, error) {
	ev := StartRecipeDeploymentProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StartRecipeDeploymentProblemType: valid values are %v", v, AllowedStartRecipeDeploymentProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StartRecipeDeploymentProblemType) IsValid() bool {
	for _, existing := range AllowedStartRecipeDeploymentProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StartRecipeDeploymentProblemType value
func (v StartRecipeDeploymentProblemType) Ptr() *StartRecipeDeploymentProblemType {
	return &v
}

type NullableStartRecipeDeploymentProblemType struct {
	value *StartRecipeDeploymentProblemType
	isSet bool
}

func (v NullableStartRecipeDeploymentProblemType) Get() *StartRecipeDeploymentProblemType {
	return v.value
}

func (v *NullableStartRecipeDeploymentProblemType) Set(val *StartRecipeDeploymentProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableStartRecipeDeploymentProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableStartRecipeDeploymentProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartRecipeDeploymentProblemType(val *StartRecipeDeploymentProblemType) *NullableStartRecipeDeploymentProblemType {
	return &NullableStartRecipeDeploymentProblemType{value: val, isSet: true}
}

func (v NullableStartRecipeDeploymentProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartRecipeDeploymentProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

