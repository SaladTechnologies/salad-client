/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package salad-client

import (
	"encoding/json"
)

// checks if the Recipe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Recipe{}

// Recipe Represents a recipe
type Recipe struct {
	// The unique identifier
	Id string `json:"id"`
	// The recipe name
	Name string `json:"name"`
	// A markdown file containing a brief summary of the recipe
	Readme string `json:"readme"`
	Resources *RecipeResources `json:"resources,omitempty"`
	Networking NullableRecipeNetworking `json:"networking,omitempty"`
}

// NewRecipe instantiates a new Recipe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipe(id string, name string, readme string) *Recipe {
	this := Recipe{}
	this.Id = id
	this.Name = name
	this.Readme = readme
	return &this
}

// NewRecipeWithDefaults instantiates a new Recipe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeWithDefaults() *Recipe {
	this := Recipe{}
	return &this
}

// GetId returns the Id field value
func (o *Recipe) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Recipe) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Recipe) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Recipe) SetName(v string) {
	o.Name = v
}

// GetReadme returns the Readme field value
func (o *Recipe) GetReadme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Readme
}

// GetReadmeOk returns a tuple with the Readme field value
// and a boolean to check if the value has been set.
func (o *Recipe) GetReadmeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Readme, true
}

// SetReadme sets field value
func (o *Recipe) SetReadme(v string) {
	o.Readme = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Recipe) GetResources() RecipeResources {
	if o == nil || IsNil(o.Resources) {
		var ret RecipeResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recipe) GetResourcesOk() (*RecipeResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Recipe) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given RecipeResources and assigns it to the Resources field.
func (o *Recipe) SetResources(v RecipeResources) {
	o.Resources = &v
}

// GetNetworking returns the Networking field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recipe) GetNetworking() RecipeNetworking {
	if o == nil || IsNil(o.Networking.Get()) {
		var ret RecipeNetworking
		return ret
	}
	return *o.Networking.Get()
}

// GetNetworkingOk returns a tuple with the Networking field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recipe) GetNetworkingOk() (*RecipeNetworking, bool) {
	if o == nil {
		return nil, false
	}
	return o.Networking.Get(), o.Networking.IsSet()
}

// HasNetworking returns a boolean if a field has been set.
func (o *Recipe) HasNetworking() bool {
	if o != nil && o.Networking.IsSet() {
		return true
	}

	return false
}

// SetNetworking gets a reference to the given NullableRecipeNetworking and assigns it to the Networking field.
func (o *Recipe) SetNetworking(v RecipeNetworking) {
	o.Networking.Set(&v)
}
// SetNetworkingNil sets the value for Networking to be an explicit nil
func (o *Recipe) SetNetworkingNil() {
	o.Networking.Set(nil)
}

// UnsetNetworking ensures that no value is present for Networking, not even an explicit nil
func (o *Recipe) UnsetNetworking() {
	o.Networking.Unset()
}

func (o Recipe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Recipe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["readme"] = o.Readme
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if o.Networking.IsSet() {
		toSerialize["networking"] = o.Networking.Get()
	}
	return toSerialize, nil
}

type NullableRecipe struct {
	value *Recipe
	isSet bool
}

func (v NullableRecipe) Get() *Recipe {
	return v.value
}

func (v *NullableRecipe) Set(val *Recipe) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipe) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipe(val *Recipe) *NullableRecipe {
	return &NullableRecipe{value: val, isSet: true}
}

func (v NullableRecipe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


