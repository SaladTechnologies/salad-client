/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CountryCode the model 'CountryCode'
type CountryCode string

// List of CountryCode
const (
	AF CountryCode = "af"
	AL CountryCode = "al"
	DZ CountryCode = "dz"
	AS CountryCode = "as"
	AD CountryCode = "ad"
	AO CountryCode = "ao"
	AI CountryCode = "ai"
	AQ CountryCode = "aq"
	AG CountryCode = "ag"
	AR CountryCode = "ar"
	AM CountryCode = "am"
	AW CountryCode = "aw"
	AU CountryCode = "au"
	AT CountryCode = "at"
	AZ CountryCode = "az"
	BS CountryCode = "bs"
	BH CountryCode = "bh"
	BD CountryCode = "bd"
	BB CountryCode = "bb"
	BY CountryCode = "by"
	BE CountryCode = "be"
	BZ CountryCode = "bz"
	BJ CountryCode = "bj"
	BM CountryCode = "bm"
	BT CountryCode = "bt"
	BO CountryCode = "bo"
	BQ CountryCode = "bq"
	BA CountryCode = "ba"
	BW CountryCode = "bw"
	BV CountryCode = "bv"
	BR CountryCode = "br"
	IO CountryCode = "io"
	BN CountryCode = "bn"
	BG CountryCode = "bg"
	BF CountryCode = "bf"
	BI CountryCode = "bi"
	CV CountryCode = "cv"
	KH CountryCode = "kh"
	CM CountryCode = "cm"
	CA CountryCode = "ca"
	KY CountryCode = "ky"
	CF CountryCode = "cf"
	TD CountryCode = "td"
	CL CountryCode = "cl"
	CN CountryCode = "cn"
	CX CountryCode = "cx"
	CC CountryCode = "cc"
	CO CountryCode = "co"
	KM CountryCode = "km"
	CD CountryCode = "cd"
	CG CountryCode = "cg"
	CK CountryCode = "ck"
	CR CountryCode = "cr"
	HR CountryCode = "hr"
	CU CountryCode = "cu"
	CW CountryCode = "cw"
	CY CountryCode = "cy"
	CZ CountryCode = "cz"
	CI CountryCode = "ci"
	DK CountryCode = "dk"
	DJ CountryCode = "dj"
	DM CountryCode = "dm"
	DO CountryCode = "do"
	EC CountryCode = "ec"
	EG CountryCode = "eg"
	SV CountryCode = "sv"
	GQ CountryCode = "gq"
	ER CountryCode = "er"
	EE CountryCode = "ee"
	SZ CountryCode = "sz"
	ET CountryCode = "et"
	FK CountryCode = "fk"
	FO CountryCode = "fo"
	FJ CountryCode = "fj"
	FI CountryCode = "fi"
	FR CountryCode = "fr"
	GF CountryCode = "gf"
	PF CountryCode = "pf"
	TF CountryCode = "tf"
	GA CountryCode = "ga"
	GM CountryCode = "gm"
	GE CountryCode = "ge"
	DE CountryCode = "de"
	GH CountryCode = "gh"
	GI CountryCode = "gi"
	GR CountryCode = "gr"
	GL CountryCode = "gl"
	GD CountryCode = "gd"
	GP CountryCode = "gp"
	GU CountryCode = "gu"
	GT CountryCode = "gt"
	GG CountryCode = "gg"
	GN CountryCode = "gn"
	GW CountryCode = "gw"
	GY CountryCode = "gy"
	HT CountryCode = "ht"
	HM CountryCode = "hm"
	VA CountryCode = "va"
	HN CountryCode = "hn"
	HK CountryCode = "hk"
	HU CountryCode = "hu"
	IS CountryCode = "is"
	IN CountryCode = "in"
	ID CountryCode = "id"
	IR CountryCode = "ir"
	IQ CountryCode = "iq"
	IE CountryCode = "ie"
	IM CountryCode = "im"
	IL CountryCode = "il"
	IT CountryCode = "it"
	JM CountryCode = "jm"
	JP CountryCode = "jp"
	JE CountryCode = "je"
	JO CountryCode = "jo"
	KZ CountryCode = "kz"
	KE CountryCode = "ke"
	KI CountryCode = "ki"
	KP CountryCode = "kp"
	KR CountryCode = "kr"
	KW CountryCode = "kw"
	KG CountryCode = "kg"
	LA CountryCode = "la"
	LV CountryCode = "lv"
	LB CountryCode = "lb"
	LS CountryCode = "ls"
	LR CountryCode = "lr"
	LY CountryCode = "ly"
	LI CountryCode = "li"
	LT CountryCode = "lt"
	LU CountryCode = "lu"
	MO CountryCode = "mo"
	MG CountryCode = "mg"
	MW CountryCode = "mw"
	MY CountryCode = "my"
	MV CountryCode = "mv"
	ML CountryCode = "ml"
	MT CountryCode = "mt"
	MH CountryCode = "mh"
	MQ CountryCode = "mq"
	MR CountryCode = "mr"
	MU CountryCode = "mu"
	YT CountryCode = "yt"
	MX CountryCode = "mx"
	FM CountryCode = "fm"
	MD CountryCode = "md"
	MC CountryCode = "mc"
	MN CountryCode = "mn"
	ME CountryCode = "me"
	MS CountryCode = "ms"
	MA CountryCode = "ma"
	MZ CountryCode = "mz"
	MM CountryCode = "mm"
	NA CountryCode = "na"
	NR CountryCode = "nr"
	NP CountryCode = "np"
	NL CountryCode = "nl"
	NC CountryCode = "nc"
	NZ CountryCode = "nz"
	NI CountryCode = "ni"
	NE CountryCode = "ne"
	NG CountryCode = "ng"
	NU CountryCode = "nu"
	NF CountryCode = "nf"
	MP CountryCode = "mp"
	FALSE CountryCode = "false"
	OM CountryCode = "om"
	PK CountryCode = "pk"
	PW CountryCode = "pw"
	PS CountryCode = "ps"
	PA CountryCode = "pa"
	PG CountryCode = "pg"
	PY CountryCode = "py"
	PE CountryCode = "pe"
	PH CountryCode = "ph"
	PN CountryCode = "pn"
	PL CountryCode = "pl"
	PT CountryCode = "pt"
	PR CountryCode = "pr"
	QA CountryCode = "qa"
	MK CountryCode = "mk"
	RO CountryCode = "ro"
	RU CountryCode = "ru"
	RW CountryCode = "rw"
	RE CountryCode = "re"
	BL CountryCode = "bl"
	SH CountryCode = "sh"
	KN CountryCode = "kn"
	LC CountryCode = "lc"
	MF CountryCode = "mf"
	PM CountryCode = "pm"
	VC CountryCode = "vc"
	WS CountryCode = "ws"
	SM CountryCode = "sm"
	ST CountryCode = "st"
	SA CountryCode = "sa"
	SN CountryCode = "sn"
	RS CountryCode = "rs"
	SC CountryCode = "sc"
	SL CountryCode = "sl"
	SG CountryCode = "sg"
	SX CountryCode = "sx"
	SK CountryCode = "sk"
	SI CountryCode = "si"
	SB CountryCode = "sb"
	SO CountryCode = "so"
	ZA CountryCode = "za"
	GS CountryCode = "gs"
	SS CountryCode = "ss"
	ES CountryCode = "es"
	LK CountryCode = "lk"
	SD CountryCode = "sd"
	SR CountryCode = "sr"
	SJ CountryCode = "sj"
	SE CountryCode = "se"
	CH CountryCode = "ch"
	SY CountryCode = "sy"
	TW CountryCode = "tw"
	TJ CountryCode = "tj"
	TZ CountryCode = "tz"
	TH CountryCode = "th"
	TL CountryCode = "tl"
	TG CountryCode = "tg"
	TK CountryCode = "tk"
	TO CountryCode = "to"
	TT CountryCode = "tt"
	TN CountryCode = "tn"
	TR CountryCode = "tr"
	TM CountryCode = "tm"
	TC CountryCode = "tc"
	TV CountryCode = "tv"
	UG CountryCode = "ug"
	UA CountryCode = "ua"
	AE CountryCode = "ae"
	GB CountryCode = "gb"
	UM CountryCode = "um"
	US CountryCode = "us"
	UY CountryCode = "uy"
	UZ CountryCode = "uz"
	VU CountryCode = "vu"
	VE CountryCode = "ve"
	VN CountryCode = "vn"
	VG CountryCode = "vg"
	VI CountryCode = "vi"
	WF CountryCode = "wf"
	EH CountryCode = "eh"
	YE CountryCode = "ye"
	ZM CountryCode = "zm"
	ZW CountryCode = "zw"
	AX CountryCode = "ax"
)

// All allowed values of CountryCode enum
var AllowedCountryCodeEnumValues = []CountryCode{
	"af",
	"al",
	"dz",
	"as",
	"ad",
	"ao",
	"ai",
	"aq",
	"ag",
	"ar",
	"am",
	"aw",
	"au",
	"at",
	"az",
	"bs",
	"bh",
	"bd",
	"bb",
	"by",
	"be",
	"bz",
	"bj",
	"bm",
	"bt",
	"bo",
	"bq",
	"ba",
	"bw",
	"bv",
	"br",
	"io",
	"bn",
	"bg",
	"bf",
	"bi",
	"cv",
	"kh",
	"cm",
	"ca",
	"ky",
	"cf",
	"td",
	"cl",
	"cn",
	"cx",
	"cc",
	"co",
	"km",
	"cd",
	"cg",
	"ck",
	"cr",
	"hr",
	"cu",
	"cw",
	"cy",
	"cz",
	"ci",
	"dk",
	"dj",
	"dm",
	"do",
	"ec",
	"eg",
	"sv",
	"gq",
	"er",
	"ee",
	"sz",
	"et",
	"fk",
	"fo",
	"fj",
	"fi",
	"fr",
	"gf",
	"pf",
	"tf",
	"ga",
	"gm",
	"ge",
	"de",
	"gh",
	"gi",
	"gr",
	"gl",
	"gd",
	"gp",
	"gu",
	"gt",
	"gg",
	"gn",
	"gw",
	"gy",
	"ht",
	"hm",
	"va",
	"hn",
	"hk",
	"hu",
	"is",
	"in",
	"id",
	"ir",
	"iq",
	"ie",
	"im",
	"il",
	"it",
	"jm",
	"jp",
	"je",
	"jo",
	"kz",
	"ke",
	"ki",
	"kp",
	"kr",
	"kw",
	"kg",
	"la",
	"lv",
	"lb",
	"ls",
	"lr",
	"ly",
	"li",
	"lt",
	"lu",
	"mo",
	"mg",
	"mw",
	"my",
	"mv",
	"ml",
	"mt",
	"mh",
	"mq",
	"mr",
	"mu",
	"yt",
	"mx",
	"fm",
	"md",
	"mc",
	"mn",
	"me",
	"ms",
	"ma",
	"mz",
	"mm",
	"na",
	"nr",
	"np",
	"nl",
	"nc",
	"nz",
	"ni",
	"ne",
	"ng",
	"nu",
	"nf",
	"mp",
	"false",
	"om",
	"pk",
	"pw",
	"ps",
	"pa",
	"pg",
	"py",
	"pe",
	"ph",
	"pn",
	"pl",
	"pt",
	"pr",
	"qa",
	"mk",
	"ro",
	"ru",
	"rw",
	"re",
	"bl",
	"sh",
	"kn",
	"lc",
	"mf",
	"pm",
	"vc",
	"ws",
	"sm",
	"st",
	"sa",
	"sn",
	"rs",
	"sc",
	"sl",
	"sg",
	"sx",
	"sk",
	"si",
	"sb",
	"so",
	"za",
	"gs",
	"ss",
	"es",
	"lk",
	"sd",
	"sr",
	"sj",
	"se",
	"ch",
	"sy",
	"tw",
	"tj",
	"tz",
	"th",
	"tl",
	"tg",
	"tk",
	"to",
	"tt",
	"tn",
	"tr",
	"tm",
	"tc",
	"tv",
	"ug",
	"ua",
	"ae",
	"gb",
	"um",
	"us",
	"uy",
	"uz",
	"vu",
	"ve",
	"vn",
	"vg",
	"vi",
	"wf",
	"eh",
	"ye",
	"zm",
	"zw",
	"ax",
}

func (v *CountryCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CountryCode(value)
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CountryCode", value)
}

// NewCountryCodeFromValue returns a pointer to a valid CountryCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryCodeFromValue(v string) (*CountryCode, error) {
	ev := CountryCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CountryCode: valid values are %v", v, AllowedCountryCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CountryCode) IsValid() bool {
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CountryCode value
func (v CountryCode) Ptr() *CountryCode {
	return &v
}

type NullableCountryCode struct {
	value *CountryCode
	isSet bool
}

func (v NullableCountryCode) Get() *CountryCode {
	return v.value
}

func (v *NullableCountryCode) Set(val *CountryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCode(val *CountryCode) *NullableCountryCode {
	return &NullableCountryCode{value: val, isSet: true}
}

func (v NullableCountryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

