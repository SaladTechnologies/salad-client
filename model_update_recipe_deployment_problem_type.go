/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package salad-client

import (
	"encoding/json"
	"fmt"
)

// UpdateRecipeDeploymentProblemType the model 'UpdateRecipeDeploymentProblemType'
type UpdateRecipeDeploymentProblemType string

// List of UpdateRecipeDeploymentProblemType
const (
	UPDATED_INSTANCE_QUOTA_EXCEEDED UpdateRecipeDeploymentProblemType = "updated_instance_quota_exceeded"
	NULL UpdateRecipeDeploymentProblemType = "null"
)

// All allowed values of UpdateRecipeDeploymentProblemType enum
var AllowedUpdateRecipeDeploymentProblemTypeEnumValues = []UpdateRecipeDeploymentProblemType{
	"updated_instance_quota_exceeded",
	"null",
}

func (v *UpdateRecipeDeploymentProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UpdateRecipeDeploymentProblemType(value)
	for _, existing := range AllowedUpdateRecipeDeploymentProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UpdateRecipeDeploymentProblemType", value)
}

// NewUpdateRecipeDeploymentProblemTypeFromValue returns a pointer to a valid UpdateRecipeDeploymentProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateRecipeDeploymentProblemTypeFromValue(v string) (*UpdateRecipeDeploymentProblemType, error) {
	ev := UpdateRecipeDeploymentProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpdateRecipeDeploymentProblemType: valid values are %v", v, AllowedUpdateRecipeDeploymentProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateRecipeDeploymentProblemType) IsValid() bool {
	for _, existing := range AllowedUpdateRecipeDeploymentProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UpdateRecipeDeploymentProblemType value
func (v UpdateRecipeDeploymentProblemType) Ptr() *UpdateRecipeDeploymentProblemType {
	return &v
}

type NullableUpdateRecipeDeploymentProblemType struct {
	value *UpdateRecipeDeploymentProblemType
	isSet bool
}

func (v NullableUpdateRecipeDeploymentProblemType) Get() *UpdateRecipeDeploymentProblemType {
	return v.value
}

func (v *NullableUpdateRecipeDeploymentProblemType) Set(val *UpdateRecipeDeploymentProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecipeDeploymentProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecipeDeploymentProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecipeDeploymentProblemType(val *UpdateRecipeDeploymentProblemType) *NullableUpdateRecipeDeploymentProblemType {
	return &NullableUpdateRecipeDeploymentProblemType{value: val, isSet: true}
}

func (v NullableUpdateRecipeDeploymentProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecipeDeploymentProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

