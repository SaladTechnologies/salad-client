/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ContainerNetworkingProtocol the model 'ContainerNetworkingProtocol'
type ContainerNetworkingProtocol string

// All allowed values of ContainerNetworkingProtocol enum
var AllowedContainerNetworkingProtocolEnumValues = []ContainerNetworkingProtocol{
	"http",
}

func (v *ContainerNetworkingProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerNetworkingProtocol(value)
	for _, existing := range AllowedContainerNetworkingProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerNetworkingProtocol", value)
}

// NewContainerNetworkingProtocolFromValue returns a pointer to a valid ContainerNetworkingProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerNetworkingProtocolFromValue(v string) (*ContainerNetworkingProtocol, error) {
	ev := ContainerNetworkingProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerNetworkingProtocol: valid values are %v", v, AllowedContainerNetworkingProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerNetworkingProtocol) IsValid() bool {
	for _, existing := range AllowedContainerNetworkingProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerNetworkingProtocol value
func (v ContainerNetworkingProtocol) Ptr() *ContainerNetworkingProtocol {
	return &v
}

type NullableContainerNetworkingProtocol struct {
	value *ContainerNetworkingProtocol
	isSet bool
}

func (v NullableContainerNetworkingProtocol) Get() *ContainerNetworkingProtocol {
	return v.value
}

func (v *NullableContainerNetworkingProtocol) Set(val *ContainerNetworkingProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerNetworkingProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerNetworkingProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerNetworkingProtocol(val *ContainerNetworkingProtocol) *NullableContainerNetworkingProtocol {
	return &NullableContainerNetworkingProtocol{value: val, isSet: true}
}

func (v NullableContainerNetworkingProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerNetworkingProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

