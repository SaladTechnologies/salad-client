/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
)

// checks if the CreateContainerLogging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateContainerLogging{}

// CreateContainerLogging Configuration options for directing container logs to a logging provider. This schema enables you to specify a single logging destination for container output, supporting monitoring, debugging, and analytics use cases. Each provider has its own configuration parameters defined in the referenced schemas. Only one logging provider can be selected at a time.
type CreateContainerLogging struct {
	Axiom *ContainerLoggingAxiom `json:"axiom,omitempty"`
	Datadog *ContainerLoggingDatadog `json:"datadog,omitempty"`
	Http *CreateContainerLoggingHttp `json:"http,omitempty"`
	NewRelic *ContainerLoggingNewRelic `json:"new_relic,omitempty"`
	Splunk *ContainerLoggingSplunk `json:"splunk,omitempty"`
	Tcp *ContainerLoggingTcp `json:"tcp,omitempty"`
}

// NewCreateContainerLogging instantiates a new CreateContainerLogging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateContainerLogging() *CreateContainerLogging {
	this := CreateContainerLogging{}
	return &this
}

// NewCreateContainerLoggingWithDefaults instantiates a new CreateContainerLogging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateContainerLoggingWithDefaults() *CreateContainerLogging {
	this := CreateContainerLogging{}
	return &this
}

// GetAxiom returns the Axiom field value if set, zero value otherwise.
func (o *CreateContainerLogging) GetAxiom() ContainerLoggingAxiom {
	if o == nil || IsNil(o.Axiom) {
		var ret ContainerLoggingAxiom
		return ret
	}
	return *o.Axiom
}

// GetAxiomOk returns a tuple with the Axiom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerLogging) GetAxiomOk() (*ContainerLoggingAxiom, bool) {
	if o == nil || IsNil(o.Axiom) {
		return nil, false
	}
	return o.Axiom, true
}

// HasAxiom returns a boolean if a field has been set.
func (o *CreateContainerLogging) HasAxiom() bool {
	if o != nil && !IsNil(o.Axiom) {
		return true
	}

	return false
}

// SetAxiom gets a reference to the given ContainerLoggingAxiom and assigns it to the Axiom field.
func (o *CreateContainerLogging) SetAxiom(v ContainerLoggingAxiom) {
	o.Axiom = &v
}

// GetDatadog returns the Datadog field value if set, zero value otherwise.
func (o *CreateContainerLogging) GetDatadog() ContainerLoggingDatadog {
	if o == nil || IsNil(o.Datadog) {
		var ret ContainerLoggingDatadog
		return ret
	}
	return *o.Datadog
}

// GetDatadogOk returns a tuple with the Datadog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerLogging) GetDatadogOk() (*ContainerLoggingDatadog, bool) {
	if o == nil || IsNil(o.Datadog) {
		return nil, false
	}
	return o.Datadog, true
}

// HasDatadog returns a boolean if a field has been set.
func (o *CreateContainerLogging) HasDatadog() bool {
	if o != nil && !IsNil(o.Datadog) {
		return true
	}

	return false
}

// SetDatadog gets a reference to the given ContainerLoggingDatadog and assigns it to the Datadog field.
func (o *CreateContainerLogging) SetDatadog(v ContainerLoggingDatadog) {
	o.Datadog = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *CreateContainerLogging) GetHttp() CreateContainerLoggingHttp {
	if o == nil || IsNil(o.Http) {
		var ret CreateContainerLoggingHttp
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerLogging) GetHttpOk() (*CreateContainerLoggingHttp, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *CreateContainerLogging) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given CreateContainerLoggingHttp and assigns it to the Http field.
func (o *CreateContainerLogging) SetHttp(v CreateContainerLoggingHttp) {
	o.Http = &v
}

// GetNewRelic returns the NewRelic field value if set, zero value otherwise.
func (o *CreateContainerLogging) GetNewRelic() ContainerLoggingNewRelic {
	if o == nil || IsNil(o.NewRelic) {
		var ret ContainerLoggingNewRelic
		return ret
	}
	return *o.NewRelic
}

// GetNewRelicOk returns a tuple with the NewRelic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerLogging) GetNewRelicOk() (*ContainerLoggingNewRelic, bool) {
	if o == nil || IsNil(o.NewRelic) {
		return nil, false
	}
	return o.NewRelic, true
}

// HasNewRelic returns a boolean if a field has been set.
func (o *CreateContainerLogging) HasNewRelic() bool {
	if o != nil && !IsNil(o.NewRelic) {
		return true
	}

	return false
}

// SetNewRelic gets a reference to the given ContainerLoggingNewRelic and assigns it to the NewRelic field.
func (o *CreateContainerLogging) SetNewRelic(v ContainerLoggingNewRelic) {
	o.NewRelic = &v
}

// GetSplunk returns the Splunk field value if set, zero value otherwise.
func (o *CreateContainerLogging) GetSplunk() ContainerLoggingSplunk {
	if o == nil || IsNil(o.Splunk) {
		var ret ContainerLoggingSplunk
		return ret
	}
	return *o.Splunk
}

// GetSplunkOk returns a tuple with the Splunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerLogging) GetSplunkOk() (*ContainerLoggingSplunk, bool) {
	if o == nil || IsNil(o.Splunk) {
		return nil, false
	}
	return o.Splunk, true
}

// HasSplunk returns a boolean if a field has been set.
func (o *CreateContainerLogging) HasSplunk() bool {
	if o != nil && !IsNil(o.Splunk) {
		return true
	}

	return false
}

// SetSplunk gets a reference to the given ContainerLoggingSplunk and assigns it to the Splunk field.
func (o *CreateContainerLogging) SetSplunk(v ContainerLoggingSplunk) {
	o.Splunk = &v
}

// GetTcp returns the Tcp field value if set, zero value otherwise.
func (o *CreateContainerLogging) GetTcp() ContainerLoggingTcp {
	if o == nil || IsNil(o.Tcp) {
		var ret ContainerLoggingTcp
		return ret
	}
	return *o.Tcp
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateContainerLogging) GetTcpOk() (*ContainerLoggingTcp, bool) {
	if o == nil || IsNil(o.Tcp) {
		return nil, false
	}
	return o.Tcp, true
}

// HasTcp returns a boolean if a field has been set.
func (o *CreateContainerLogging) HasTcp() bool {
	if o != nil && !IsNil(o.Tcp) {
		return true
	}

	return false
}

// SetTcp gets a reference to the given ContainerLoggingTcp and assigns it to the Tcp field.
func (o *CreateContainerLogging) SetTcp(v ContainerLoggingTcp) {
	o.Tcp = &v
}

func (o CreateContainerLogging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateContainerLogging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Axiom) {
		toSerialize["axiom"] = o.Axiom
	}
	if !IsNil(o.Datadog) {
		toSerialize["datadog"] = o.Datadog
	}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !IsNil(o.NewRelic) {
		toSerialize["new_relic"] = o.NewRelic
	}
	if !IsNil(o.Splunk) {
		toSerialize["splunk"] = o.Splunk
	}
	if !IsNil(o.Tcp) {
		toSerialize["tcp"] = o.Tcp
	}
	return toSerialize, nil
}

type NullableCreateContainerLogging struct {
	value *CreateContainerLogging
	isSet bool
}

func (v NullableCreateContainerLogging) Get() *CreateContainerLogging {
	return v.value
}

func (v *NullableCreateContainerLogging) Set(val *CreateContainerLogging) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateContainerLogging) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateContainerLogging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateContainerLogging(val *CreateContainerLogging) *NullableCreateContainerLogging {
	return &NullableCreateContainerLogging{value: val, isSet: true}
}

func (v NullableCreateContainerLogging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateContainerLogging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


