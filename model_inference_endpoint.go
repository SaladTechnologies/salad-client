/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.7
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InferenceEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InferenceEndpoint{}

// InferenceEndpoint Represents an inference endpoint
type InferenceEndpoint struct {
	// The inference endpoint identifier.
	Id string `json:"id"`
	// The inference endpoint name.
	Name string `json:"name" validate:"regexp=^[a-z][a-z0-9-]{0,61}[a-z0-9]$"`
	// The organization name.
	OrganizationName string `json:"organization_name" validate:"regexp=^[a-z][a-z0-9-]{0,61}[a-z0-9]$"`
	// The display-friendly name of the resource.
	DisplayName string `json:"display_name" validate:"regexp=^[ ,-.0-9A-Za-z]+$"`
	// The detailed description of the resource.
	Description string `json:"description" validate:"regexp=^[\\\\P{Cc}\\\\P{Cn}\\\\P{Cs}]*$"`
	// A markdown file containing a detailed description of the inference endpoint
	Readme string `json:"readme"`
	// A description of the price
	PriceDescription string `json:"price_description"`
	// The URL of the icon image
	IconUrl string `json:"icon_url"`
	// The input schema
	InputSchema string `json:"input_schema"`
	// The output schema
	OutputSchema string `json:"output_schema"`
}

type _InferenceEndpoint InferenceEndpoint

// NewInferenceEndpoint instantiates a new InferenceEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInferenceEndpoint(id string, name string, organizationName string, displayName string, description string, readme string, priceDescription string, iconUrl string, inputSchema string, outputSchema string) *InferenceEndpoint {
	this := InferenceEndpoint{}
	this.Id = id
	this.Name = name
	this.OrganizationName = organizationName
	this.DisplayName = displayName
	this.Description = description
	this.Readme = readme
	this.PriceDescription = priceDescription
	this.IconUrl = iconUrl
	this.InputSchema = inputSchema
	this.OutputSchema = outputSchema
	return &this
}

// NewInferenceEndpointWithDefaults instantiates a new InferenceEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInferenceEndpointWithDefaults() *InferenceEndpoint {
	this := InferenceEndpoint{}
	return &this
}

// GetId returns the Id field value
func (o *InferenceEndpoint) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InferenceEndpoint) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *InferenceEndpoint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InferenceEndpoint) SetName(v string) {
	o.Name = v
}

// GetOrganizationName returns the OrganizationName field value
func (o *InferenceEndpoint) GetOrganizationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationName, true
}

// SetOrganizationName sets field value
func (o *InferenceEndpoint) SetOrganizationName(v string) {
	o.OrganizationName = v
}

// GetDisplayName returns the DisplayName field value
func (o *InferenceEndpoint) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *InferenceEndpoint) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value
func (o *InferenceEndpoint) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *InferenceEndpoint) SetDescription(v string) {
	o.Description = v
}

// GetReadme returns the Readme field value
func (o *InferenceEndpoint) GetReadme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Readme
}

// GetReadmeOk returns a tuple with the Readme field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetReadmeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Readme, true
}

// SetReadme sets field value
func (o *InferenceEndpoint) SetReadme(v string) {
	o.Readme = v
}

// GetPriceDescription returns the PriceDescription field value
func (o *InferenceEndpoint) GetPriceDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceDescription
}

// GetPriceDescriptionOk returns a tuple with the PriceDescription field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetPriceDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceDescription, true
}

// SetPriceDescription sets field value
func (o *InferenceEndpoint) SetPriceDescription(v string) {
	o.PriceDescription = v
}

// GetIconUrl returns the IconUrl field value
func (o *InferenceEndpoint) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *InferenceEndpoint) SetIconUrl(v string) {
	o.IconUrl = v
}

// GetInputSchema returns the InputSchema field value
func (o *InferenceEndpoint) GetInputSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetInputSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputSchema, true
}

// SetInputSchema sets field value
func (o *InferenceEndpoint) SetInputSchema(v string) {
	o.InputSchema = v
}

// GetOutputSchema returns the OutputSchema field value
func (o *InferenceEndpoint) GetOutputSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value
// and a boolean to check if the value has been set.
func (o *InferenceEndpoint) GetOutputSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutputSchema, true
}

// SetOutputSchema sets field value
func (o *InferenceEndpoint) SetOutputSchema(v string) {
	o.OutputSchema = v
}

func (o InferenceEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InferenceEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["organization_name"] = o.OrganizationName
	toSerialize["display_name"] = o.DisplayName
	toSerialize["description"] = o.Description
	toSerialize["readme"] = o.Readme
	toSerialize["price_description"] = o.PriceDescription
	toSerialize["icon_url"] = o.IconUrl
	toSerialize["input_schema"] = o.InputSchema
	toSerialize["output_schema"] = o.OutputSchema
	return toSerialize, nil
}

func (o *InferenceEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"organization_name",
		"display_name",
		"description",
		"readme",
		"price_description",
		"icon_url",
		"input_schema",
		"output_schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInferenceEndpoint := _InferenceEndpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInferenceEndpoint)

	if err != nil {
		return err
	}

	*o = InferenceEndpoint(varInferenceEndpoint)

	return err
}

type NullableInferenceEndpoint struct {
	value *InferenceEndpoint
	isSet bool
}

func (v NullableInferenceEndpoint) Get() *InferenceEndpoint {
	return v.value
}

func (v *NullableInferenceEndpoint) Set(val *InferenceEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableInferenceEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableInferenceEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInferenceEndpoint(val *InferenceEndpoint) *NullableInferenceEndpoint {
	return &NullableInferenceEndpoint{value: val, isSet: true}
}

func (v NullableInferenceEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInferenceEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


