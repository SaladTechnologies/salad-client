/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.7
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
)

// checks if the ContainerLogging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerLogging{}

// ContainerLogging struct for ContainerLogging
type ContainerLogging struct {
	Axiom *ContainerLoggingAxiom `json:"axiom,omitempty"`
	Datadog *ContainerLoggingDatadog `json:"datadog,omitempty"`
	NewRelic *ContainerLoggingNewRelic `json:"new_relic,omitempty"`
	Splunk *ContainerLoggingSplunk `json:"splunk,omitempty"`
	Tcp *ContainerLoggingTcp `json:"tcp,omitempty"`
	Http *ContainerLoggingHttp `json:"http,omitempty"`
}

// NewContainerLogging instantiates a new ContainerLogging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerLogging() *ContainerLogging {
	this := ContainerLogging{}
	return &this
}

// NewContainerLoggingWithDefaults instantiates a new ContainerLogging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerLoggingWithDefaults() *ContainerLogging {
	this := ContainerLogging{}
	return &this
}

// GetAxiom returns the Axiom field value if set, zero value otherwise.
func (o *ContainerLogging) GetAxiom() ContainerLoggingAxiom {
	if o == nil || IsNil(o.Axiom) {
		var ret ContainerLoggingAxiom
		return ret
	}
	return *o.Axiom
}

// GetAxiomOk returns a tuple with the Axiom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogging) GetAxiomOk() (*ContainerLoggingAxiom, bool) {
	if o == nil || IsNil(o.Axiom) {
		return nil, false
	}
	return o.Axiom, true
}

// HasAxiom returns a boolean if a field has been set.
func (o *ContainerLogging) HasAxiom() bool {
	if o != nil && !IsNil(o.Axiom) {
		return true
	}

	return false
}

// SetAxiom gets a reference to the given ContainerLoggingAxiom and assigns it to the Axiom field.
func (o *ContainerLogging) SetAxiom(v ContainerLoggingAxiom) {
	o.Axiom = &v
}

// GetDatadog returns the Datadog field value if set, zero value otherwise.
func (o *ContainerLogging) GetDatadog() ContainerLoggingDatadog {
	if o == nil || IsNil(o.Datadog) {
		var ret ContainerLoggingDatadog
		return ret
	}
	return *o.Datadog
}

// GetDatadogOk returns a tuple with the Datadog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogging) GetDatadogOk() (*ContainerLoggingDatadog, bool) {
	if o == nil || IsNil(o.Datadog) {
		return nil, false
	}
	return o.Datadog, true
}

// HasDatadog returns a boolean if a field has been set.
func (o *ContainerLogging) HasDatadog() bool {
	if o != nil && !IsNil(o.Datadog) {
		return true
	}

	return false
}

// SetDatadog gets a reference to the given ContainerLoggingDatadog and assigns it to the Datadog field.
func (o *ContainerLogging) SetDatadog(v ContainerLoggingDatadog) {
	o.Datadog = &v
}

// GetNewRelic returns the NewRelic field value if set, zero value otherwise.
func (o *ContainerLogging) GetNewRelic() ContainerLoggingNewRelic {
	if o == nil || IsNil(o.NewRelic) {
		var ret ContainerLoggingNewRelic
		return ret
	}
	return *o.NewRelic
}

// GetNewRelicOk returns a tuple with the NewRelic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogging) GetNewRelicOk() (*ContainerLoggingNewRelic, bool) {
	if o == nil || IsNil(o.NewRelic) {
		return nil, false
	}
	return o.NewRelic, true
}

// HasNewRelic returns a boolean if a field has been set.
func (o *ContainerLogging) HasNewRelic() bool {
	if o != nil && !IsNil(o.NewRelic) {
		return true
	}

	return false
}

// SetNewRelic gets a reference to the given ContainerLoggingNewRelic and assigns it to the NewRelic field.
func (o *ContainerLogging) SetNewRelic(v ContainerLoggingNewRelic) {
	o.NewRelic = &v
}

// GetSplunk returns the Splunk field value if set, zero value otherwise.
func (o *ContainerLogging) GetSplunk() ContainerLoggingSplunk {
	if o == nil || IsNil(o.Splunk) {
		var ret ContainerLoggingSplunk
		return ret
	}
	return *o.Splunk
}

// GetSplunkOk returns a tuple with the Splunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogging) GetSplunkOk() (*ContainerLoggingSplunk, bool) {
	if o == nil || IsNil(o.Splunk) {
		return nil, false
	}
	return o.Splunk, true
}

// HasSplunk returns a boolean if a field has been set.
func (o *ContainerLogging) HasSplunk() bool {
	if o != nil && !IsNil(o.Splunk) {
		return true
	}

	return false
}

// SetSplunk gets a reference to the given ContainerLoggingSplunk and assigns it to the Splunk field.
func (o *ContainerLogging) SetSplunk(v ContainerLoggingSplunk) {
	o.Splunk = &v
}

// GetTcp returns the Tcp field value if set, zero value otherwise.
func (o *ContainerLogging) GetTcp() ContainerLoggingTcp {
	if o == nil || IsNil(o.Tcp) {
		var ret ContainerLoggingTcp
		return ret
	}
	return *o.Tcp
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogging) GetTcpOk() (*ContainerLoggingTcp, bool) {
	if o == nil || IsNil(o.Tcp) {
		return nil, false
	}
	return o.Tcp, true
}

// HasTcp returns a boolean if a field has been set.
func (o *ContainerLogging) HasTcp() bool {
	if o != nil && !IsNil(o.Tcp) {
		return true
	}

	return false
}

// SetTcp gets a reference to the given ContainerLoggingTcp and assigns it to the Tcp field.
func (o *ContainerLogging) SetTcp(v ContainerLoggingTcp) {
	o.Tcp = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *ContainerLogging) GetHttp() ContainerLoggingHttp {
	if o == nil || IsNil(o.Http) {
		var ret ContainerLoggingHttp
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogging) GetHttpOk() (*ContainerLoggingHttp, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *ContainerLogging) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given ContainerLoggingHttp and assigns it to the Http field.
func (o *ContainerLogging) SetHttp(v ContainerLoggingHttp) {
	o.Http = &v
}

func (o ContainerLogging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerLogging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Axiom) {
		toSerialize["axiom"] = o.Axiom
	}
	if !IsNil(o.Datadog) {
		toSerialize["datadog"] = o.Datadog
	}
	if !IsNil(o.NewRelic) {
		toSerialize["new_relic"] = o.NewRelic
	}
	if !IsNil(o.Splunk) {
		toSerialize["splunk"] = o.Splunk
	}
	if !IsNil(o.Tcp) {
		toSerialize["tcp"] = o.Tcp
	}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	return toSerialize, nil
}

type NullableContainerLogging struct {
	value *ContainerLogging
	isSet bool
}

func (v NullableContainerLogging) Get() *ContainerLogging {
	return v.value
}

func (v *NullableContainerLogging) Set(val *ContainerLogging) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerLogging) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerLogging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerLogging(val *ContainerLogging) *NullableContainerLogging {
	return &NullableContainerLogging{value: val, isSet: true}
}

func (v NullableContainerLogging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerLogging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


