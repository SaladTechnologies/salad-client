/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// ContainerGroupNetworkingLoadBalancer The container group networking load balancer.
type ContainerGroupNetworkingLoadBalancer string

// List of ContainerGroupNetworkingLoadBalancer
const (
	CONTAINERGROUPNETWORKINGLOADBALANCER_ROUND_ROBIN ContainerGroupNetworkingLoadBalancer = "round_robin"
	CONTAINERGROUPNETWORKINGLOADBALANCER_LEAST_NUMBER_OF_CONNECTIONS ContainerGroupNetworkingLoadBalancer = "least_number_of_connections"
)

// All allowed values of ContainerGroupNetworkingLoadBalancer enum
var AllowedContainerGroupNetworkingLoadBalancerEnumValues = []ContainerGroupNetworkingLoadBalancer{
	"round_robin",
	"least_number_of_connections",
}

func (v *ContainerGroupNetworkingLoadBalancer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerGroupNetworkingLoadBalancer(value)
	for _, existing := range AllowedContainerGroupNetworkingLoadBalancerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerGroupNetworkingLoadBalancer", value)
}

// NewContainerGroupNetworkingLoadBalancerFromValue returns a pointer to a valid ContainerGroupNetworkingLoadBalancer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerGroupNetworkingLoadBalancerFromValue(v string) (*ContainerGroupNetworkingLoadBalancer, error) {
	ev := ContainerGroupNetworkingLoadBalancer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerGroupNetworkingLoadBalancer: valid values are %v", v, AllowedContainerGroupNetworkingLoadBalancerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerGroupNetworkingLoadBalancer) IsValid() bool {
	for _, existing := range AllowedContainerGroupNetworkingLoadBalancerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerGroupNetworkingLoadBalancer value
func (v ContainerGroupNetworkingLoadBalancer) Ptr() *ContainerGroupNetworkingLoadBalancer {
	return &v
}

type NullableContainerGroupNetworkingLoadBalancer struct {
	value *ContainerGroupNetworkingLoadBalancer
	isSet bool
}

func (v NullableContainerGroupNetworkingLoadBalancer) Get() *ContainerGroupNetworkingLoadBalancer {
	return v.value
}

func (v *NullableContainerGroupNetworkingLoadBalancer) Set(val *ContainerGroupNetworkingLoadBalancer) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerGroupNetworkingLoadBalancer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerGroupNetworkingLoadBalancer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerGroupNetworkingLoadBalancer(val *ContainerGroupNetworkingLoadBalancer) *NullableContainerGroupNetworkingLoadBalancer {
	return &NullableContainerGroupNetworkingLoadBalancer{value: val, isSet: true}
}

func (v NullableContainerGroupNetworkingLoadBalancer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerGroupNetworkingLoadBalancer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

