/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Container type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Container{}

// Container Represents a container with its configuration and resource requirements.
type Container struct {
	// List of commands to run inside the container. Each command is a string representing a command-line instruction.
	Command []string `json:"command"`
	// Environment variables to set in the container.
	EnvironmentVariables map[string]string `json:"environment_variables,omitempty"`
	// SHA-256 hash (64-character hexadecimal string)
	Hash *string `json:"hash,omitempty" validate:"regexp=^sha\\\\d{1,3}:[a-fA-F0-9]{40,135}$"`
	// The container image.
	Image string `json:"image" validate:"regexp=^.*$"`
	// The container image caching.
	ImageCaching *bool `json:"image_caching,omitempty"`
	Logging *ContainerLogging `json:"logging,omitempty"`
	Resources ContainerResourceRequirements `json:"resources"`
	// Size of the container in bytes.
	Size *int64 `json:"size,omitempty"`
}

type _Container Container

// NewContainer instantiates a new Container object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainer(command []string, image string, resources ContainerResourceRequirements) *Container {
	this := Container{}
	this.Command = command
	this.Image = image
	this.Resources = resources
	return &this
}

// NewContainerWithDefaults instantiates a new Container object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerWithDefaults() *Container {
	this := Container{}
	return &this
}

// GetCommand returns the Command field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *Container) GetCommand() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Container) GetCommandOk() ([]string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// SetCommand sets field value
func (o *Container) SetCommand(v []string) {
	o.Command = v
}

// GetEnvironmentVariables returns the EnvironmentVariables field value if set, zero value otherwise.
func (o *Container) GetEnvironmentVariables() map[string]string {
	if o == nil || IsNil(o.EnvironmentVariables) {
		var ret map[string]string
		return ret
	}
	return o.EnvironmentVariables
}

// GetEnvironmentVariablesOk returns a tuple with the EnvironmentVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetEnvironmentVariablesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.EnvironmentVariables) {
		return map[string]string{}, false
	}
	return o.EnvironmentVariables, true
}

// HasEnvironmentVariables returns a boolean if a field has been set.
func (o *Container) HasEnvironmentVariables() bool {
	if o != nil && !IsNil(o.EnvironmentVariables) {
		return true
	}

	return false
}

// SetEnvironmentVariables gets a reference to the given map[string]string and assigns it to the EnvironmentVariables field.
func (o *Container) SetEnvironmentVariables(v map[string]string) {
	o.EnvironmentVariables = v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Container) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Container) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Container) SetHash(v string) {
	o.Hash = &v
}

// GetImage returns the Image field value
func (o *Container) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Container) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *Container) SetImage(v string) {
	o.Image = v
}

// GetImageCaching returns the ImageCaching field value if set, zero value otherwise.
func (o *Container) GetImageCaching() bool {
	if o == nil || IsNil(o.ImageCaching) {
		var ret bool
		return ret
	}
	return *o.ImageCaching
}

// GetImageCachingOk returns a tuple with the ImageCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetImageCachingOk() (*bool, bool) {
	if o == nil || IsNil(o.ImageCaching) {
		return nil, false
	}
	return o.ImageCaching, true
}

// HasImageCaching returns a boolean if a field has been set.
func (o *Container) HasImageCaching() bool {
	if o != nil && !IsNil(o.ImageCaching) {
		return true
	}

	return false
}

// SetImageCaching gets a reference to the given bool and assigns it to the ImageCaching field.
func (o *Container) SetImageCaching(v bool) {
	o.ImageCaching = &v
}

// GetLogging returns the Logging field value if set, zero value otherwise.
func (o *Container) GetLogging() ContainerLogging {
	if o == nil || IsNil(o.Logging) {
		var ret ContainerLogging
		return ret
	}
	return *o.Logging
}

// GetLoggingOk returns a tuple with the Logging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetLoggingOk() (*ContainerLogging, bool) {
	if o == nil || IsNil(o.Logging) {
		return nil, false
	}
	return o.Logging, true
}

// HasLogging returns a boolean if a field has been set.
func (o *Container) HasLogging() bool {
	if o != nil && !IsNil(o.Logging) {
		return true
	}

	return false
}

// SetLogging gets a reference to the given ContainerLogging and assigns it to the Logging field.
func (o *Container) SetLogging(v ContainerLogging) {
	o.Logging = &v
}

// GetResources returns the Resources field value
func (o *Container) GetResources() ContainerResourceRequirements {
	if o == nil {
		var ret ContainerResourceRequirements
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *Container) GetResourcesOk() (*ContainerResourceRequirements, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *Container) SetResources(v ContainerResourceRequirements) {
	o.Resources = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Container) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Container) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Container) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Container) SetSize(v int64) {
	o.Size = &v
}

func (o Container) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Container) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.EnvironmentVariables) {
		toSerialize["environment_variables"] = o.EnvironmentVariables
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	toSerialize["image"] = o.Image
	if !IsNil(o.ImageCaching) {
		toSerialize["image_caching"] = o.ImageCaching
	}
	if !IsNil(o.Logging) {
		toSerialize["logging"] = o.Logging
	}
	toSerialize["resources"] = o.Resources
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

func (o *Container) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"command",
		"image",
		"resources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainer := _Container{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainer)

	if err != nil {
		return err
	}

	*o = Container(varContainer)

	return err
}

type NullableContainer struct {
	value *Container
	isSet bool
}

func (v NullableContainer) Get() *Container {
	return v.value
}

func (v *NullableContainer) Set(val *Container) {
	v.value = val
	v.isSet = true
}

func (v NullableContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainer(val *Container) *NullableContainer {
	return &NullableContainer{value: val, isSet: true}
}

func (v NullableContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


