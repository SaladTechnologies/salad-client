/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RecipeDeploymentsAPIService RecipeDeploymentsAPI service
type RecipeDeploymentsAPIService service

type ApiCreateRecipeDeploymentRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	createRecipeDeployment *CreateRecipeDeployment
}

func (r ApiCreateRecipeDeploymentRequest) CreateRecipeDeployment(createRecipeDeployment CreateRecipeDeployment) ApiCreateRecipeDeploymentRequest {
	r.createRecipeDeployment = &createRecipeDeployment
	return r
}

func (r ApiCreateRecipeDeploymentRequest) Execute() (*RecipeDeployment, *http.Response, error) {
	return r.ApiService.CreateRecipeDeploymentExecute(r)
}

/*
CreateRecipeDeployment Create a Recipe Deployment

Creates a new Recipe Deployment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @return ApiCreateRecipeDeploymentRequest
*/
func (a *RecipeDeploymentsAPIService) CreateRecipeDeployment(ctx context.Context, organizationName string, projectName string) ApiCreateRecipeDeploymentRequest {
	return ApiCreateRecipeDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
	}
}

// Execute executes the request
//  @return RecipeDeployment
func (a *RecipeDeploymentsAPIService) CreateRecipeDeploymentExecute(r ApiCreateRecipeDeploymentRequest) (*RecipeDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecipeDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.CreateRecipeDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if r.createRecipeDeployment == nil {
		return localVarReturnValue, nil, reportError("createRecipeDeployment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRecipeDeployment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRecipeDeploymentRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
}

func (r ApiDeleteRecipeDeploymentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRecipeDeploymentExecute(r)
}

/*
DeleteRecipeDeployment Delete a Recipe Deployment

Deletes a Recipe Deployment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiDeleteRecipeDeploymentRequest
*/
func (a *RecipeDeploymentsAPIService) DeleteRecipeDeployment(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiDeleteRecipeDeploymentRequest {
	return ApiDeleteRecipeDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
func (a *RecipeDeploymentsAPIService) DeleteRecipeDeploymentExecute(r ApiDeleteRecipeDeploymentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.DeleteRecipeDeployment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return nil, reportError("recipeDeploymentName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRecipeDeploymentRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
}

func (r ApiGetRecipeDeploymentRequest) Execute() (*RecipeDeployment, *http.Response, error) {
	return r.ApiService.GetRecipeDeploymentExecute(r)
}

/*
GetRecipeDeployment Get a Recipe Deployment

Gets a Recipe Deployment by its unique name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiGetRecipeDeploymentRequest
*/
func (a *RecipeDeploymentsAPIService) GetRecipeDeployment(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiGetRecipeDeploymentRequest {
	return ApiGetRecipeDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
//  @return RecipeDeployment
func (a *RecipeDeploymentsAPIService) GetRecipeDeploymentExecute(r ApiGetRecipeDeploymentRequest) (*RecipeDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecipeDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.GetRecipeDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return localVarReturnValue, nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return localVarReturnValue, nil, reportError("recipeDeploymentName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRecipeDeploymentInstancesRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
}

func (r ApiListRecipeDeploymentInstancesRequest) Execute() (*RecipeDeploymentInstances, *http.Response, error) {
	return r.ApiService.ListRecipeDeploymentInstancesExecute(r)
}

/*
ListRecipeDeploymentInstances List Recipe Deployment Instances

Retrieves a list of recipe deployment instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiListRecipeDeploymentInstancesRequest
*/
func (a *RecipeDeploymentsAPIService) ListRecipeDeploymentInstances(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiListRecipeDeploymentInstancesRequest {
	return ApiListRecipeDeploymentInstancesRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
//  @return RecipeDeploymentInstances
func (a *RecipeDeploymentsAPIService) ListRecipeDeploymentInstancesExecute(r ApiListRecipeDeploymentInstancesRequest) (*RecipeDeploymentInstances, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecipeDeploymentInstances
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.ListRecipeDeploymentInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return localVarReturnValue, nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return localVarReturnValue, nil, reportError("recipeDeploymentName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRecipeDeploymentsRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
}

func (r ApiListRecipeDeploymentsRequest) Execute() (*RecipeDeploymentList, *http.Response, error) {
	return r.ApiService.ListRecipeDeploymentsExecute(r)
}

/*
ListRecipeDeployments List Recipe Deployments

Gets the list of all recipe deployments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @return ApiListRecipeDeploymentsRequest
*/
func (a *RecipeDeploymentsAPIService) ListRecipeDeployments(ctx context.Context, organizationName string, projectName string) ApiListRecipeDeploymentsRequest {
	return ApiListRecipeDeploymentsRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
	}
}

// Execute executes the request
//  @return RecipeDeploymentList
func (a *RecipeDeploymentsAPIService) ListRecipeDeploymentsExecute(r ApiListRecipeDeploymentsRequest) (*RecipeDeploymentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecipeDeploymentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.ListRecipeDeployments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestartDeployedRecipeRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
}

func (r ApiRestartDeployedRecipeRequest) Execute() (*http.Response, error) {
	return r.ApiService.RestartDeployedRecipeExecute(r)
}

/*
RestartDeployedRecipe Restart a Deployed Recipe

Restarts a Deployed Recipe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiRestartDeployedRecipeRequest
*/
func (a *RecipeDeploymentsAPIService) RestartDeployedRecipe(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiRestartDeployedRecipeRequest {
	return ApiRestartDeployedRecipeRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
func (a *RecipeDeploymentsAPIService) RestartDeployedRecipeExecute(r ApiRestartDeployedRecipeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.RestartDeployedRecipe")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}/restart"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return nil, reportError("recipeDeploymentName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStartDeployedRecipeRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
}

func (r ApiStartDeployedRecipeRequest) Execute() (*http.Response, error) {
	return r.ApiService.StartDeployedRecipeExecute(r)
}

/*
StartDeployedRecipe Start a Deployed Recipe

Starts a Deployed Recipe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiStartDeployedRecipeRequest
*/
func (a *RecipeDeploymentsAPIService) StartDeployedRecipe(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiStartDeployedRecipeRequest {
	return ApiStartDeployedRecipeRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
func (a *RecipeDeploymentsAPIService) StartDeployedRecipeExecute(r ApiStartDeployedRecipeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.StartDeployedRecipe")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return nil, reportError("recipeDeploymentName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStopDeployedRecipeRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
}

func (r ApiStopDeployedRecipeRequest) Execute() (*http.Response, error) {
	return r.ApiService.StopDeployedRecipeExecute(r)
}

/*
StopDeployedRecipe Stop a Deployed Recipe

Stops a Deployed Recipe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiStopDeployedRecipeRequest
*/
func (a *RecipeDeploymentsAPIService) StopDeployedRecipe(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiStopDeployedRecipeRequest {
	return ApiStopDeployedRecipeRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
func (a *RecipeDeploymentsAPIService) StopDeployedRecipeExecute(r ApiStopDeployedRecipeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.StopDeployedRecipe")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}/stop"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return nil, reportError("recipeDeploymentName must have less than 63 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateRecipeDeploymentRequest struct {
	ctx context.Context
	ApiService *RecipeDeploymentsAPIService
	organizationName string
	projectName string
	recipeDeploymentName string
	updateRecipeDeployment *UpdateRecipeDeployment
}

func (r ApiUpdateRecipeDeploymentRequest) UpdateRecipeDeployment(updateRecipeDeployment UpdateRecipeDeployment) ApiUpdateRecipeDeploymentRequest {
	r.updateRecipeDeployment = &updateRecipeDeployment
	return r
}

func (r ApiUpdateRecipeDeploymentRequest) Execute() (*RecipeDeployment, *http.Response, error) {
	return r.ApiService.UpdateRecipeDeploymentExecute(r)
}

/*
UpdateRecipeDeployment Update a Recipe Deployment

Updates a Recipe Deployment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationName The unique organization name
 @param projectName The unique project name
 @param recipeDeploymentName The unique recipe deployment name
 @return ApiUpdateRecipeDeploymentRequest
*/
func (a *RecipeDeploymentsAPIService) UpdateRecipeDeployment(ctx context.Context, organizationName string, projectName string, recipeDeploymentName string) ApiUpdateRecipeDeploymentRequest {
	return ApiUpdateRecipeDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		organizationName: organizationName,
		projectName: projectName,
		recipeDeploymentName: recipeDeploymentName,
	}
}

// Execute executes the request
//  @return RecipeDeployment
func (a *RecipeDeploymentsAPIService) UpdateRecipeDeploymentExecute(r ApiUpdateRecipeDeploymentRequest) (*RecipeDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecipeDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipeDeploymentsAPIService.UpdateRecipeDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{organization_name}/projects/{project_name}/recipe-deployments/{recipe_deployment_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"organization_name"+"}", url.PathEscape(parameterValueToString(r.organizationName, "organizationName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_name"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"recipe_deployment_name"+"}", url.PathEscape(parameterValueToString(r.recipeDeploymentName, "recipeDeploymentName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.organizationName) < 2 {
		return localVarReturnValue, nil, reportError("organizationName must have at least 2 elements")
	}
	if strlen(r.organizationName) > 63 {
		return localVarReturnValue, nil, reportError("organizationName must have less than 63 elements")
	}
	if strlen(r.projectName) < 2 {
		return localVarReturnValue, nil, reportError("projectName must have at least 2 elements")
	}
	if strlen(r.projectName) > 63 {
		return localVarReturnValue, nil, reportError("projectName must have less than 63 elements")
	}
	if strlen(r.recipeDeploymentName) < 2 {
		return localVarReturnValue, nil, reportError("recipeDeploymentName must have at least 2 elements")
	}
	if strlen(r.recipeDeploymentName) > 63 {
		return localVarReturnValue, nil, reportError("recipeDeploymentName must have less than 63 elements")
	}
	if r.updateRecipeDeployment == nil {
		return localVarReturnValue, nil, reportError("updateRecipeDeployment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRecipeDeployment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Salad-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
