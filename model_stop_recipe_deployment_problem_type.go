/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// StopRecipeDeploymentProblemType the model 'StopRecipeDeploymentProblemType'
type StopRecipeDeploymentProblemType string

// List of StopRecipeDeploymentProblemType
const (
	STOPRECIPEDEPLOYMENTPROBLEMTYPE_NULL StopRecipeDeploymentProblemType = "null"
)

// All allowed values of StopRecipeDeploymentProblemType enum
var AllowedStopRecipeDeploymentProblemTypeEnumValues = []StopRecipeDeploymentProblemType{
	"null",
}

func (v *StopRecipeDeploymentProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StopRecipeDeploymentProblemType(value)
	for _, existing := range AllowedStopRecipeDeploymentProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StopRecipeDeploymentProblemType", value)
}

// NewStopRecipeDeploymentProblemTypeFromValue returns a pointer to a valid StopRecipeDeploymentProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStopRecipeDeploymentProblemTypeFromValue(v string) (*StopRecipeDeploymentProblemType, error) {
	ev := StopRecipeDeploymentProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StopRecipeDeploymentProblemType: valid values are %v", v, AllowedStopRecipeDeploymentProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StopRecipeDeploymentProblemType) IsValid() bool {
	for _, existing := range AllowedStopRecipeDeploymentProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StopRecipeDeploymentProblemType value
func (v StopRecipeDeploymentProblemType) Ptr() *StopRecipeDeploymentProblemType {
	return &v
}

type NullableStopRecipeDeploymentProblemType struct {
	value *StopRecipeDeploymentProblemType
	isSet bool
}

func (v NullableStopRecipeDeploymentProblemType) Get() *StopRecipeDeploymentProblemType {
	return v.value
}

func (v *NullableStopRecipeDeploymentProblemType) Set(val *StopRecipeDeploymentProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableStopRecipeDeploymentProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableStopRecipeDeploymentProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopRecipeDeploymentProblemType(val *StopRecipeDeploymentProblemType) *NullableStopRecipeDeploymentProblemType {
	return &NullableStopRecipeDeploymentProblemType{value: val, isSet: true}
}

func (v NullableStopRecipeDeploymentProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopRecipeDeploymentProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

