/*
SaladCloud API

The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.

API version: 0.9.0-alpha.11
Contact: cloud@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// InferenceEndpointJobEventAction The action that was taken on the inference endpoint job.
type InferenceEndpointJobEventAction string

// List of InferenceEndpointJobEventAction
const (
	INFERENCEENDPOINTJOBEVENTACTION_CREATED InferenceEndpointJobEventAction = "created"
	INFERENCEENDPOINTJOBEVENTACTION_STARTED InferenceEndpointJobEventAction = "started"
	INFERENCEENDPOINTJOBEVENTACTION_SUCCEEDED InferenceEndpointJobEventAction = "succeeded"
	INFERENCEENDPOINTJOBEVENTACTION_CANCELLED InferenceEndpointJobEventAction = "cancelled"
	INFERENCEENDPOINTJOBEVENTACTION_FAILED InferenceEndpointJobEventAction = "failed"
)

// All allowed values of InferenceEndpointJobEventAction enum
var AllowedInferenceEndpointJobEventActionEnumValues = []InferenceEndpointJobEventAction{
	"created",
	"started",
	"succeeded",
	"cancelled",
	"failed",
}

func (v *InferenceEndpointJobEventAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InferenceEndpointJobEventAction(value)
	for _, existing := range AllowedInferenceEndpointJobEventActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InferenceEndpointJobEventAction", value)
}

// NewInferenceEndpointJobEventActionFromValue returns a pointer to a valid InferenceEndpointJobEventAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInferenceEndpointJobEventActionFromValue(v string) (*InferenceEndpointJobEventAction, error) {
	ev := InferenceEndpointJobEventAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InferenceEndpointJobEventAction: valid values are %v", v, AllowedInferenceEndpointJobEventActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InferenceEndpointJobEventAction) IsValid() bool {
	for _, existing := range AllowedInferenceEndpointJobEventActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InferenceEndpointJobEventAction value
func (v InferenceEndpointJobEventAction) Ptr() *InferenceEndpointJobEventAction {
	return &v
}

type NullableInferenceEndpointJobEventAction struct {
	value *InferenceEndpointJobEventAction
	isSet bool
}

func (v NullableInferenceEndpointJobEventAction) Get() *InferenceEndpointJobEventAction {
	return v.value
}

func (v *NullableInferenceEndpointJobEventAction) Set(val *InferenceEndpointJobEventAction) {
	v.value = val
	v.isSet = true
}

func (v NullableInferenceEndpointJobEventAction) IsSet() bool {
	return v.isSet
}

func (v *NullableInferenceEndpointJobEventAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInferenceEndpointJobEventAction(val *InferenceEndpointJobEventAction) *NullableInferenceEndpointJobEventAction {
	return &NullableInferenceEndpointJobEventAction{value: val, isSet: true}
}

func (v NullableInferenceEndpointJobEventAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInferenceEndpointJobEventAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

