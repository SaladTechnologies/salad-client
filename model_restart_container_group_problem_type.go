/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RestartContainerGroupProblemType the model 'RestartContainerGroupProblemType'
type RestartContainerGroupProblemType string

// List of RestartContainerGroupProblemType
const (
	NULL RestartContainerGroupProblemType = "null"
)

// All allowed values of RestartContainerGroupProblemType enum
var AllowedRestartContainerGroupProblemTypeEnumValues = []RestartContainerGroupProblemType{
	"null",
}

func (v *RestartContainerGroupProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RestartContainerGroupProblemType(value)
	for _, existing := range AllowedRestartContainerGroupProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RestartContainerGroupProblemType", value)
}

// NewRestartContainerGroupProblemTypeFromValue returns a pointer to a valid RestartContainerGroupProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRestartContainerGroupProblemTypeFromValue(v string) (*RestartContainerGroupProblemType, error) {
	ev := RestartContainerGroupProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RestartContainerGroupProblemType: valid values are %v", v, AllowedRestartContainerGroupProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RestartContainerGroupProblemType) IsValid() bool {
	for _, existing := range AllowedRestartContainerGroupProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RestartContainerGroupProblemType value
func (v RestartContainerGroupProblemType) Ptr() *RestartContainerGroupProblemType {
	return &v
}

type NullableRestartContainerGroupProblemType struct {
	value *RestartContainerGroupProblemType
	isSet bool
}

func (v NullableRestartContainerGroupProblemType) Get() *RestartContainerGroupProblemType {
	return v.value
}

func (v *NullableRestartContainerGroupProblemType) Set(val *RestartContainerGroupProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestartContainerGroupProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestartContainerGroupProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestartContainerGroupProblemType(val *RestartContainerGroupProblemType) *NullableRestartContainerGroupProblemType {
	return &NullableRestartContainerGroupProblemType{value: val, isSet: true}
}

func (v NullableRestartContainerGroupProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestartContainerGroupProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

