/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// ReallocateContainerGroupInstanceProblemType the model 'ReallocateContainerGroupInstanceProblemType'
type ReallocateContainerGroupInstanceProblemType string

// List of ReallocateContainerGroupInstanceProblemType
const (
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_ORGANIZATION_NOT_FOUND ReallocateContainerGroupInstanceProblemType = "organization_not_found"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_CONTAINER_GROUP_NOT_FOUND ReallocateContainerGroupInstanceProblemType = "container_group_not_found"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_NODE_NOT_SCHEDULED ReallocateContainerGroupInstanceProblemType = "node_not_scheduled"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_CONTAINER_GROUP_INSTANCE_NOT_FOUND ReallocateContainerGroupInstanceProblemType = "container_group_instance_not_found"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_ORGANIZATION_QUOTAS_NOT_DEFINED ReallocateContainerGroupInstanceProblemType = "organization_quotas_not_defined"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_TOO_MANY_REQUESTS ReallocateContainerGroupInstanceProblemType = "too_many_requests"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_UNEXPECTED_ERROR ReallocateContainerGroupInstanceProblemType = "unexpected_error"
	REALLOCATECONTAINERGROUPINSTANCEPROBLEMTYPE_NULL ReallocateContainerGroupInstanceProblemType = "null"
)

// All allowed values of ReallocateContainerGroupInstanceProblemType enum
var AllowedReallocateContainerGroupInstanceProblemTypeEnumValues = []ReallocateContainerGroupInstanceProblemType{
	"organization_not_found",
	"container_group_not_found",
	"node_not_scheduled",
	"container_group_instance_not_found",
	"organization_quotas_not_defined",
	"too_many_requests",
	"unexpected_error",
	"null",
}

func (v *ReallocateContainerGroupInstanceProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReallocateContainerGroupInstanceProblemType(value)
	for _, existing := range AllowedReallocateContainerGroupInstanceProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReallocateContainerGroupInstanceProblemType", value)
}

// NewReallocateContainerGroupInstanceProblemTypeFromValue returns a pointer to a valid ReallocateContainerGroupInstanceProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReallocateContainerGroupInstanceProblemTypeFromValue(v string) (*ReallocateContainerGroupInstanceProblemType, error) {
	ev := ReallocateContainerGroupInstanceProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReallocateContainerGroupInstanceProblemType: valid values are %v", v, AllowedReallocateContainerGroupInstanceProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReallocateContainerGroupInstanceProblemType) IsValid() bool {
	for _, existing := range AllowedReallocateContainerGroupInstanceProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReallocateContainerGroupInstanceProblemType value
func (v ReallocateContainerGroupInstanceProblemType) Ptr() *ReallocateContainerGroupInstanceProblemType {
	return &v
}

type NullableReallocateContainerGroupInstanceProblemType struct {
	value *ReallocateContainerGroupInstanceProblemType
	isSet bool
}

func (v NullableReallocateContainerGroupInstanceProblemType) Get() *ReallocateContainerGroupInstanceProblemType {
	return v.value
}

func (v *NullableReallocateContainerGroupInstanceProblemType) Set(val *ReallocateContainerGroupInstanceProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableReallocateContainerGroupInstanceProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableReallocateContainerGroupInstanceProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReallocateContainerGroupInstanceProblemType(val *ReallocateContainerGroupInstanceProblemType) *NullableReallocateContainerGroupInstanceProblemType {
	return &NullableReallocateContainerGroupInstanceProblemType{value: val, isSet: true}
}

func (v NullableReallocateContainerGroupInstanceProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReallocateContainerGroupInstanceProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

