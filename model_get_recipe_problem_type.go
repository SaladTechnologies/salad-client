/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package saladclient

import (
	"encoding/json"
	"fmt"
)

// GetRecipeProblemType the model 'GetRecipeProblemType'
type GetRecipeProblemType string

// List of GetRecipeProblemType
const (
	GETRECIPEPROBLEMTYPE_NULL GetRecipeProblemType = "null"
)

// All allowed values of GetRecipeProblemType enum
var AllowedGetRecipeProblemTypeEnumValues = []GetRecipeProblemType{
	"null",
}

func (v *GetRecipeProblemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GetRecipeProblemType(value)
	for _, existing := range AllowedGetRecipeProblemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GetRecipeProblemType", value)
}

// NewGetRecipeProblemTypeFromValue returns a pointer to a valid GetRecipeProblemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGetRecipeProblemTypeFromValue(v string) (*GetRecipeProblemType, error) {
	ev := GetRecipeProblemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GetRecipeProblemType: valid values are %v", v, AllowedGetRecipeProblemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GetRecipeProblemType) IsValid() bool {
	for _, existing := range AllowedGetRecipeProblemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GetRecipeProblemType value
func (v GetRecipeProblemType) Ptr() *GetRecipeProblemType {
	return &v
}

type NullableGetRecipeProblemType struct {
	value *GetRecipeProblemType
	isSet bool
}

func (v NullableGetRecipeProblemType) Get() *GetRecipeProblemType {
	return v.value
}

func (v *NullableGetRecipeProblemType) Set(val *GetRecipeProblemType) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecipeProblemType) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecipeProblemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecipeProblemType(val *GetRecipeProblemType) *NullableGetRecipeProblemType {
	return &NullableGetRecipeProblemType{value: val, isSet: true}
}

func (v NullableGetRecipeProblemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecipeProblemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

