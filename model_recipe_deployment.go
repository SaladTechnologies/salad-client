/*
SaladCloud Public API

The SaladCloud Public API.

API version: 1.0.0-alpha.56
Contact: support@salad.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecipeDeployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipeDeployment{}

// RecipeDeployment Represents a deployed recipe
type RecipeDeployment struct {
	Id string `json:"id"`
	Name string `json:"name"`
	DisplayName string `json:"display_name"`
	Replicas int32 `json:"replicas"`
	CurrentState ContainerGroupState `json:"current_state"`
	Recipe Recipe `json:"recipe"`
	Networking NullableRecipeNetworking `json:"networking,omitempty"`
}

// NewRecipeDeployment instantiates a new RecipeDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipeDeployment(id string, name string, displayName string, replicas int32, currentState ContainerGroupState, recipe Recipe) *RecipeDeployment {
	this := RecipeDeployment{}
	this.Id = id
	this.Name = name
	this.DisplayName = displayName
	this.Replicas = replicas
	this.CurrentState = currentState
	this.Recipe = recipe
	return &this
}

// NewRecipeDeploymentWithDefaults instantiates a new RecipeDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipeDeploymentWithDefaults() *RecipeDeployment {
	this := RecipeDeployment{}
	return &this
}

// GetId returns the Id field value
func (o *RecipeDeployment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RecipeDeployment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RecipeDeployment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RecipeDeployment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RecipeDeployment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RecipeDeployment) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *RecipeDeployment) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *RecipeDeployment) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *RecipeDeployment) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetReplicas returns the Replicas field value
func (o *RecipeDeployment) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *RecipeDeployment) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *RecipeDeployment) SetReplicas(v int32) {
	o.Replicas = v
}

// GetCurrentState returns the CurrentState field value
func (o *RecipeDeployment) GetCurrentState() ContainerGroupState {
	if o == nil {
		var ret ContainerGroupState
		return ret
	}

	return o.CurrentState
}

// GetCurrentStateOk returns a tuple with the CurrentState field value
// and a boolean to check if the value has been set.
func (o *RecipeDeployment) GetCurrentStateOk() (*ContainerGroupState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentState, true
}

// SetCurrentState sets field value
func (o *RecipeDeployment) SetCurrentState(v ContainerGroupState) {
	o.CurrentState = v
}

// GetRecipe returns the Recipe field value
func (o *RecipeDeployment) GetRecipe() Recipe {
	if o == nil {
		var ret Recipe
		return ret
	}

	return o.Recipe
}

// GetRecipeOk returns a tuple with the Recipe field value
// and a boolean to check if the value has been set.
func (o *RecipeDeployment) GetRecipeOk() (*Recipe, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipe, true
}

// SetRecipe sets field value
func (o *RecipeDeployment) SetRecipe(v Recipe) {
	o.Recipe = v
}

// GetNetworking returns the Networking field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecipeDeployment) GetNetworking() RecipeNetworking {
	if o == nil || IsNil(o.Networking.Get()) {
		var ret RecipeNetworking
		return ret
	}
	return *o.Networking.Get()
}

// GetNetworkingOk returns a tuple with the Networking field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecipeDeployment) GetNetworkingOk() (*RecipeNetworking, bool) {
	if o == nil {
		return nil, false
	}
	return o.Networking.Get(), o.Networking.IsSet()
}

// HasNetworking returns a boolean if a field has been set.
func (o *RecipeDeployment) HasNetworking() bool {
	if o != nil && o.Networking.IsSet() {
		return true
	}

	return false
}

// SetNetworking gets a reference to the given NullableRecipeNetworking and assigns it to the Networking field.
func (o *RecipeDeployment) SetNetworking(v RecipeNetworking) {
	o.Networking.Set(&v)
}
// SetNetworkingNil sets the value for Networking to be an explicit nil
func (o *RecipeDeployment) SetNetworkingNil() {
	o.Networking.Set(nil)
}

// UnsetNetworking ensures that no value is present for Networking, not even an explicit nil
func (o *RecipeDeployment) UnsetNetworking() {
	o.Networking.Unset()
}

func (o RecipeDeployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipeDeployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["display_name"] = o.DisplayName
	toSerialize["replicas"] = o.Replicas
	toSerialize["current_state"] = o.CurrentState
	toSerialize["recipe"] = o.Recipe
	if o.Networking.IsSet() {
		toSerialize["networking"] = o.Networking.Get()
	}
	return toSerialize, nil
}

type NullableRecipeDeployment struct {
	value *RecipeDeployment
	isSet bool
}

func (v NullableRecipeDeployment) Get() *RecipeDeployment {
	return v.value
}

func (v *NullableRecipeDeployment) Set(val *RecipeDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipeDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipeDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipeDeployment(val *RecipeDeployment) *NullableRecipeDeployment {
	return &NullableRecipeDeployment{value: val, isSet: true}
}

func (v NullableRecipeDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipeDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


